[push]
    default = simple
[alias]
	hello = "!echo \"Hello World\""
	droidShowBranches = "!f() { \
                workDir=$(git config --get androidcomplete.workDir); \
                printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
                printf '\n' ;cd $workDir/adal/; printf '\n' ; printf "${RED}ADAL${NC}"; printf '%s': "  "; git branch --show-current; \
                printf '\n' ;cd $workDir/msal/; printf '\n' ; printf "${RED}MSAL${NC}"; printf '%s': "  "; git branch --show-current; \
                printf '\n' ;cd $workDir/broker/; printf '\n' ; printf "${RED}BROKER${NC}"; printf '%s': "  ";  git branch --show-current; \
                printf '\n' ;cd $workDir/common/; printf '\n' ; printf "${RED}COMMON${NC}"; printf '%s': "  ";  git branch --show-current; \
                printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            }; f"
    droidReplaceLine = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            seq 10 | sed -n '1,/[0-9]/p' \
            }; f"
	droidSetup = "!f() { \
		git clone -b dev https://github.com/AzureAD/microsoft-authentication-library-for-android.git msal; \
		git clone -b dev https://github.com/AzureAD/microsoft-authentication-library-common-for-android.git common; \
		git clone -b dev https://github.com/AzureAD/azure-activedirectory-library-for-android.git adal; \
		git clone -b dev https://github.com/AzureAD/ad-accounts-for-android.git broker; \
		git clone -b working https://msazure.visualstudio.com/DefaultCollection/One/_git/AD-MFA-phonefactor-phoneApp-android authenticator; \
        git clone -b master https://github.com/Azure-Samples/ms-identity-android-java.git azuresample; \
        git clone -b main https://github.com:Azure-Samples/ms-identity-ciam-native-auth-android-sample.git nativeauthsample; \
        git clone -b dev https://office.visualstudio.com/DefaultCollection/OneAuth/_git/OneAuth oneauth; \
        git clone -b develop https://github.com/AzureAD/microsoft-authentication-library-for-cpp.git msalcpp; \
        git clone -b master https://onedrive.visualstudio.com/DefaultCollection/SkyDrive/_git/AndroidTokenShare tsl; \
		cd msal; git submodule init; git submodule update; cd ..; \
		cd adal; git submodule init; git submodule update; cd ..; \
		cd broker; git submodule init; git submodule update; cd ..; \
		cd authenticator; git submodule init; git submodule update; cd ..; \
		workDir=$(pwd); \
		git config --replace-all androidcomplete.workDir $workDir; \
		}; f"
	droidSetupDevexOnly = "!f() { \
		git clone -b dev https://github.com/AzureAD/microsoft-authentication-library-for-android.git msal; \
		git clone -b dev https://github.com/AzureAD/microsoft-authentication-library-common-for-android.git common; \
		git clone -b dev https://github.com/AzureAD/azure-activedirectory-library-for-android.git adal; \
        git clone -b master https://github.com/Azure-Samples/ms-identity-android-java.git azuresample; \
        git clone -b main https://github.com:Azure-Samples/ms-identity-ciam-native-auth-android-sample.git nativeauthsample; \
		cd msal; git submodule init; git submodule update; cd ..; \
		cd adal; git submodule init; git submodule update; cd ..; \
		workDir=$(pwd); \
		git config --replace-all androidcomplete.workDir $workDir; \
		}; f"
	droidUpdateCommon = "!f() { \
			workDir=$(git config --get androidcomplete.workDir); \
			cd $workDir; \
			cd common; commonRevision=$(git rev-parse HEAD); cd ..;\
			echo $commonRevision; \
			cd $workDir/adal/common; git fetch origin; git checkout $commonRevision; \
			cd $workDir/msal/common; git fetch origin; git checkout $commonRevision; \
			cd $workDir/broker/common; git fetch origin; git checkout $commonRevision; \
		}; f"
	droidStatus = "!f() { \
	        RED='\\033[0;31m'; \
	        NC='\\033[0m'; \
            workDir=$(git config --get androidcomplete.workDir); \
            cd $workDir/adal/; printf "${RED}ADAL${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/msal/; printf "${RED}MSAL${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/broker/; printf "${RED}BROKER${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/common/; printf "${RED}COMMON${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/oneauth/; printf "${RED}ONEAUTH${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/msalcpp/; printf "${RED}MSALCPP${NC}"; printf ": "; git fetch origin; git status; \
            cd $workDir/tsl/; printf "${RED}TSL${NC}"; printf ": "; git fetch origin; git status; \
        }; f"
    droidNewFeature = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            cd $workDir/adal/; git checkout -b $1 dev; \
            cd $workDir/msal/; git checkout -b $1 dev; \
            cd $workDir/broker/; git checkout -b $1 dev; \
            cd $workDir/common/; git checkout -b $1 dev; \
            cd $workDir/msalcpp/; git checkout -b $1 develop; \
        }; f"
    droidCheckout = "!f() { \
          workDir=$(git config --get androidcomplete.workDir); \
          cd $workDir/adal/; git checkout $1; \
          cd $workDir/msal/; git checkout $1; \
          cd $workDir/broker/; git checkout $1; \
          cd $workDir/common/; git checkout $1; \
          cd $workDir/msalcpp/; git checkout $1; \
      }; f"
    droidPull = "!f() { \
              workDir=$(git config --get androidcomplete.workDir); \
              cd $workDir/adal/; git pull; \
              cd $workDir/msal/; git pull; \
              cd $workDir/broker/; git pull; \
              cd $workDir/common/; git pull; \
              cd $workDir/msalcpp/; git pull; \
          }; f"
    droidBranch = "!f() { \
    	RED='\\033[0;31m'; \
	    NC='\\033[0m'; \
        workDir=$(git config --get androidcomplete.workDir); \
        cd $workDir/; printf "${RED}ANDROID-COMPLETE${NC}"; printf '%s\n' ": "; git branch; \
        cd $workDir/adal/; printf '\n' ; printf "${RED}ADAL${NC}"; printf '%s\n' ": "; git branch; \
        cd $workDir/msal/; printf '\n' ; printf "${RED}MSAL${NC}"; printf '%s\n' ": "; git branch; \
        cd $workDir/broker/; printf '\n' ; printf "${RED}BROKER${NC}"; printf '%s\n' ": "; git branch; \
        cd $workDir/common/; printf '\n' ; printf "${RED}COMMON${NC}"; printf '%s\n' ": "; git branch; \
    }; f"
    droidStash = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            cd $workDir/adal/; git stash $1; \
            cd $workDir/msal/; git stash $1; \
            cd $workDir/broker/; git stash $1; \
            cd $workDir/common/; git stash $1; \
            cd $workDir/msalcpp/; git stash $1; \
        }; f"
    droidUpdateVersionsGradle = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            git droidNewFeature android/update-versions-gradle; \
            cp $workDir/gradle/versions.gradle $workDir/adal/gradle; \
            cp $workDir/gradle.properties $workDir/adal; \
            cp $workDir/gradle/wrapper/gradle-wrapper.properties $workDir/adal/gradle/wrapper; \
            cp $workDir/gradle/versions.gradle $workDir/broker/gradle; \
            cp $workDir/gradle.properties $workDir/broker; \
            cp $workDir/gradle/wrapper/gradle-wrapper.properties $workDir/broker/gradle/wrapper; \
            cp $workDir/gradle/versions.gradle $workDir/common/gradle; \
            cp $workDir/gradle.properties $workDir/common; \
            cp $workDir/gradle/wrapper/gradle-wrapper.properties $workDir/common/gradle/wrapper; \
            cp $workDir/gradle/versions.gradle $workDir/msal/gradle; \
            cp $workDir/gradle.properties $workDir/msal; \
            cp $workDir/gradle/wrapper/gradle-wrapper.properties $workDir/msal/gradle/wrapper; \
            cp $workDir/gradle/versions.gradle $workDir/msalcpp/source/android/msal/gradle; \
            cp $workDir/gradle.properties $workDir/msalcpp/source/android/msal; \
            cp $workDir/gradle/wrapper/gradle-wrapper.properties $workDir/msalcpp/source/android/msal/gradle/wrapper; \
        }; f"
    droidAssembleAllRootProjects = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            cd $workDir/adal; ./gradlew.bat assembleLocalDebug; \
            cd $workDir/broker; ./gradlew.bat assembleLocalDebug; \
            cd $workDir/common; ./gradlew.bat assembleDebug; \
            cd $workDir/msal; ./gradlew.bat assembleLocalDebug; \
            cd $workDir/msalcpp; py build.py --platform android --arch x64 --configuration debug; \
        }; f"

    ;Usage git droidStartRelease <release_owner> <msal_version> <common_version> <broker_version> <adal_version>
    ;e.g. git droidStartRelease wainaina 1.0.0 2.0.0 3.0.0 4.0.0
    ;This will create the release_owner/release/version pipeline for the user.droidStartRelease
    ;Release branches on origin are non-editable and are better set as editable first then do the final
    ; release on the non editbale release branches.
    droidStartRelease = "!f() { \
            workDir=$(git config --get androidcomplete.workDir); \
            printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            printf '\n' ; printf '%s' "1. PREPARING WORK STATION FOR RELEASE"; printf '%s': "  "; \
            printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            printf '\n' ;git droidStash; \
            printf '\n' ;git droidCheckout dev; \
            printf '\n' ;git droidUpdateCommon; \
            printf '\n' ;git droidPull; \
            printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            printf '\n' ; printf '%s' "2. CUTTING and PUSHING BRANCHES"; printf '%s': "  "; \
            printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            printf '\n' ; cd $workDir/msal/; git checkout -b release/$2 dev; \
            printf '\n' ; git push -u origin release/$2; \
            printf '\n' ; git checkout -b $1/release/$2 dev; \
            printf '\n' ; git push -u origin $1/release/$2; \
            printf '\n' ; cd $workDir/common/; git checkout -b release/$3 dev; \
            printf '\n' ; git push -u origin release/$3; \
            printf '\n' ; git checkout -b $1/release/$3 dev; \
            printf '\n' ; git push -u origin $1/release/$3; \
            printf '\n' ; cd $workDir/broker/; git checkout -b release/$4 dev; \
            printf '\n' ; git push -u origin release/$4; \
            printf '\n' ; git checkout -b $1/release/$4 dev; \
            printf '\n' ; git push -u origin $1/release/$4; \
            printf '\n' ; cd $workDir/adal/; git checkout -b release/$5 dev; \
            printf '\n' ; git push -u origin release/$5; \
            printf '\n' ; git checkout -b $1/release/$5 dev; \
            printf '\n' ; git push -u origin $1/release/$5; \
            printf '\n' ; printf '%s' "-----------------------------------------"; printf '%s' "  "; \
            printf '\n' ; printf '%s' "3. LIST OF GENERATED BRANCHES"; printf '%s': "  "; \
            printf '\n' ; cd $workDir/; git droidShowBranches; \
        }; f"
    droidCheckoutDev = "!f() { \
              workDir=$(git config --get androidcomplete.workDir); \
              cd $workDir/adal/; git checkout dev; git fetch; git pull;  git submodule update; \
              cd $workDir/msal/; git checkout dev; git fetch; git pull;  git submodule update; \
              cd $workDir/broker/; git checkout dev; git fetch; git pull;  git submodule update; \
              cd $workDir/common/; git checkout dev; git fetch; git pull; \
          }; f"
    droidUpdateSubmodules = "!f() { \
              workDir=$(git config --get androidcomplete.workDir); \
              cd $workDir/adal/; git submodule update; \
              cd $workDir/msal/; git submodule update; \
              cd $workDir/broker/; git submodule update; \
          }; f"
