if (System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME") != null) {
    println "Using vsts maven username from environment variable: " + System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME")
} else if (project.findProperty("vstsUsername") != null) {
    println "Using vsts maven username from gradle properties: " + project.findProperty("vstsUsername") 
} else {
    println "No vsts maven user name defined"
}
if (System.getenv("ENV_VSTS_MVN_ANDROID_ANDROIDACCOUNTS_ACCESSTOKEN") != null) {
    println "Using vsts maven access token from environment variable"
} else if (project.findProperty("vstsMavenAccessToken") != null) {
    println "Using vsts maven access token from gradle properties"
} else {
    println "No vsts maven access token defined"
}
if (System.getenv("ENV_VSTS_GRADLE_ANDROID_ANDROIDACCOUNTS_ACCESSTOKEN") != null) {
    println "Using vsts maven access token from environment variable"
} else if (project.findProperty("vstsAriaGradleAccessToken") != null) {
    println "Using vsts aria gradle access token from gradle properties"
} else {
    println "No vsts aria gradle access token defined"
}
if (System.getenv("AZURE_ARTIFACTS_ENV_ACCESSTOKEN") != null) {
    println "Using azure artifacts access token from environment variable"
} else if (project.findProperty("azureArtifactsGradleAccessToken") != null) {
    println "Using azure artifacts access token from gradle properties"
} else {
    println "No azure artifacts access token defined"
}

project.ext.vstsUsername = System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME") : project.findProperty("vstsUsername")
project.ext.vstsMavenAccessToken = System.getenv("ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")
project.ext.ariaGradleAccessToken = System.getenv("ENV_VSTS_GRADLE_ANDROIDADACCOUNTS_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_GRADLE_ANDROIDADACCOUNTS_ACCESSTOKEN") : project.findProperty("vstsAriaGradleAccessToken")
project.ext.msazureGradleAccessToken = System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") != null ? System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") : project.findProperty("azureArtifactsGradleAccessToken")


buildscript {
    apply from: rootProject.file("gradle/versions.gradle")

    // Authenticator is setting versions of their dependencies in their gradle.properties file.
    // We'll load and merge the values we don't have in our properties file.
    /*
    Properties props = new Properties()
    props.load(new FileInputStream("authenticator/PhoneFactor/gradle.properties"))
    props.each { prop ->
        if (!project.ext.has(prop.key)) {
            project.ext.set(prop.key, prop.value)
        }
    }
    */

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${rootProject.ext.gradleVersion}"
    //    classpath "net.serenity-bdd:serenity-gradle-plugin:1.9.6"
    //    classpath 'com.google.gms:google-services:3.2.1'
    //    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    //    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${project.ext.get('androidx_navigation_version')}"
    //    classpath 'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'
    }
}

allprojects {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        buildDir = "C:/temp/${rootProject.name}/${project.name}"
    }

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven {
            url 'https://pkgs.dev.azure.com/MicrosoftDeviceSDK/DuoSDK-Public/_packaging/Duo-SDK-Feed/maven/v1'
        }
        maven {
            // msazure and aria are consumed via upstream sources of the AndroidADAL feed.
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username project.vstsUsername
                password project.vstsMavenAccessToken
            }
        }

    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
if (!project.hasProperty("vstsUsername")) {
    logger.error('vstsUsername is missing in gradle.properties')
}
if (!project.hasProperty("vstsMavenAccessToken")) {
    logger.error('vstsMavenAccessToken is missing in gradle.properties')
}
