# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Build.BuildId)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

variables:
  engineering_project_id: 'fac9d424-53d2-45c0-91b5-ef6ba7a6bf26'
  brokerhost_pipeline_id: 1432
  azuresample_pipeline_id: 1458

parameters:
- name: companyPortalLink
  displayName: Company Portal RC Link
  type: string
- name: authenticatorLink
  displayName: Authenticator RC Link
  type: string
- name: BrokerHostRC
  displayName: BrokerHost RC run ID
  type: number
- name: BrokerHostProd
  displayName: BrokerHost prod run ID
  type: number

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: 'Get Key vault AndroidAutomationRunnerAppSecret'
  inputs:
    azureSubscription: 'MSIDLABS_ANDROID_KV'
    KeyVaultName: 'ADALTestInfo'
    SecretsFilter: 'AndroidAutomationRunnerAppSecret'
    RunAsPreJob: false
- task: DownloadSecureFile@1
  displayName: 'Download Firebase Service Account Key File'
  name: gcServiceAccountKey
  inputs:
    secureFile: AndroidFirebaseServiceAccountKey.json
    retryCount: 5
- task: CmdLine@1
  displayName: 'Set MVN Access Token in Environment'
  inputs:
    filename: echo
    arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN]$(mvnAccessToken)'
# Download APKs
- task: DownloadPipelineArtifact@2
  displayName: 'Download RC Broker Host'
  inputs:
    buildType: specific
    project: '$(engineering_project_id)'
    definition: '$(brokerhost_pipeline_id)'
    artifactName: BrokerHost
    itemPattern: '**/*.apk'
    targetPath: '$(Build.StagingDirectory)/rc'
    runVersion: 'specific'
    runId: ${{ parameters.BrokerHostRC }}
- task: DownloadPipelineArtifact@2
  displayName: 'Download Production Broker Host'
  inputs:
    buildType: specific
    project: '$(engineering_project_id)'
    definition: '$(brokerhost_pipeline_id)'
    artifactName: BrokerHost
    itemPattern: '**/*.apk'
    targetPath: '$(Build.StagingDirectory)/prod'
    runVersion: 'specific'
    runId: ${{ parameters.BrokerHostRC }}
- task: DownloadPipelineArtifact@2
  displayName: 'Download latest Azure Sample'
  inputs:
    buildType: 'specific'
    project: '$(engineering_project_id)'
    definition: '$(azuresample_pipeline_id)'
    artifactName: AzureSample
    itemPattern: '**/*.apk'
    targetPath: '$(Build.StagingDirectory)/azuresample'
    buildVersionToDownload: 'latest'
- script: curl -L -o Authenticator.apk  "${{ parameters.authenticatorLink }}"
  displayName: 'Download Authenticator'
  workingDirectory: '$(Build.StagingDirectory)'
- script:  curl -L -o CompanyPortal.apk "${{ parameters.companyPortalLink }}"
  displayName: 'Download Company Portal'
  workingDirectory: '$(Build.StagingDirectory)'
- script: |
    mv azuresample/*.apk Azuresample.apk
    rm -r azuresample
    mv prod/*.apk BrokerHostProd.apk
    rm -r prod
    mv rc/*.apk BrokerHostRC.apk
    rm -r rc
  displayName: 'Rename APKs'
  workingDirectory: '$(Build.StagingDirectory)'
- script: gcloud version
  displayName: 'Check gcloud version'
- task: Gradle@1
  displayName: 'Assemble MSAL Automation App'
  inputs:
    tasks: 'clean msalautomationapp:assembleLocalBrokerHost -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PpreferPreInstalledApks'
    publishJUnitResults: false
- task: Gradle@1
  displayName: 'Assemble MSAL Automation App Instrumented Tests'
  inputs:
    tasks: 'msalautomationapp:assembleLocalBrokerHostDebugAndroidTest -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PpreferPreInstalledApks'
    publishJUnitResults: false


# In progress
- powershell: |
   $baseApkPath = "$(Build.SourcesDirectory)\msalautomationapp\build\outputs\apk"
   $appApk = "$baseApkPath\localBrokerHost\debug\msalautomationapp-local-BrokerHost-debug.apk"
   $testApk = "$baseApkPath\androidTest\localBrokerHost\debug\msalautomationapp-local-BrokerHost-debug-androidTest.apk"
   $brokerHostApk = "$(System.ArtifactsDirectory)\brokerHost-local-debug.apk"
   $azureSampleApk = "$(System.ArtifactsDirectory)\AzureSampleLocalDebug\AzureSample-local-debug.apk"
   $appApk
   $testApk
   $brokerHostApk
   $azureSampleApk
   gcloud firebase test android run 
   --type instrumentation 
   --app $appApk 
   --test $testApk 
   --device model=flame,version=29 
   --timeout 45m 
   --additional-apks $brokerHostApk,$azureSampleApk 
   --results-dir msal-BrokerHost-$(Build.BuildId)-$(Build.BuildNumber) 
   --directories-to-pull "/sdcard" --use-orchestrator 
   --environment-variables clearPackageData=true 
   --results-history-name "MSAL dev w/ dev BrokerHost" 
   --test-targets "notPackage com.microsoft.identity.client.msal.automationapp.testpass.perf"
  displayName: 'Run UI Automation on Firebase'


- task: Bash@3
  displayName: Run UI Automation on Firebase
  inputs:
    targetType: inline
    script: |
      gcloud auth activate-service-account --key-file "$(gcServiceAccountKey.secureFilePath)"
      gcloud config set project $(gCloudProjectId)
      gcloud firebase test android run \
        --type instrumentation \
        --app "$(appApk)" \
        --test "$(testApk)" \
        --device "model=$(deviceId),version=$(deviceAndroidVersion)" \
        --timeout 45m \
        --other-files "/data/local/tmp/BrokerHost.apk=$(brokerHostApk),/data/local/tmp/MicrosoftOutlook.apk=$(System.ArtifactsDirectory)/$(outlookApk)" \
        --results-dir "OneAuth-TestApp-$(Build.BuildId)-$(Build.BuildNumber)" \
        --directories-to-pull "/sdcard" \
        --use-orchestrator \
        --environment-variables \
        clearPackageData=true