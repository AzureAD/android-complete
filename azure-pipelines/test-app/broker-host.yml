# File: azure-pipelines\test-app\broker-host.yml
# Description: Generate BrokerHost APK
# use local_<project>_branch variables to build the Local version
# use dist_<project>_version variables to build the Dist version
# Variable 'dist_[adal, common, msal, ad_accounts]_version' was defined in the Variables tab
# Variable: 'ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN' was defined in the Variables tab
# https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate
name: $(Build.BuildId)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

schedules:
  - cron: 0 3 * * *
    branches:
      include:
        - master
    always: true

parameters:
- name: productFlavors
  displayName: Product Flavor
  type: string
  default: Local
  values:
  - Local
  - Dist
- name: signingConfigurations
  displayName: Signing Configuration
  type: string
  default: Debug
  values:
  - Debug
  - Release

resources:
  repositories:
  - repository: common
    type: github
    name: AzureAD/microsoft-authentication-library-common-for-android
    ref: dev
    endpoint: ANDROID_GITHUB
  - repository: msal
    type: github
    name: AzureAD/microsoft-authentication-library-for-android
    ref: dev
    endpoint: ANDROID_GITHUB
  - repository: adal
    type: github
    name: AzureAD/azure-activedirectory-library-for-android
    ref: dev
    endpoint: ANDROID_GITHUB
  - repository: broker
    type: github
    name: AzureAD/ad-accounts-for-android
    ref: fadi/broker-c-up
    endpoint: ANDROID_GITHUB

jobs:
- job: brokerhost
  displayName: Build BrokerHost ${{ parameters.productFlavors }} ${{ parameters.signingConfigurations }} APK
  pool:
    vmImage: 'windows-latest'
  variables:
  - group: AndroidAuthClientVariables
  steps:
  - checkout: self
    clean: true
    path: android-complete
  - checkout: common
    clean: true
    path: android-complete/common
  - checkout: msal
    clean: true
    submodules: true
    path: android-complete/msal
  - checkout: adal
    clean: true
    submodules: true
    path: android-complete/adal
  - checkout: broker
    clean: true
    submodules: true
    path: android-complete/broker
  - ${{ if eq(parameters.productFlavors, 'Dist') }}:
    - task: PowerShell@2
      displayName: Generate Assemble Dist Task
      inputs:
        targetType: inline
        script: |
          $assembleTask = "assembleDist${{ parameters.signingConfigurations }}"
          if (("$(dist_common_version)" -ne "")) {
              $assembleTask = $assembleTask + " -PcommonVersion=" + "$(dist_common_version)"
          }
          if (("$(dist_ad_accounts_version)" -ne "")) {
              $assembleTask = $assembleTask + " -PadAccountsVersion=" + "$(dist_ad_accounts_version)"
          }
          if (("$(dist_adal_version)" -ne "")) {
              $assembleTask = $assembleTask + " -PadalVersion=" + "$(dist_adal_version)"
          }
          if (("$(dist_msal_version)" -ne "")) {
              $assembleTask = $assembleTask + " -PmsalVersion=" + "$(dist_msal_version)"
          }
          Write-Host "##vso[task.setvariable variable=AssembleTask;]$assembleTask"
  - ${{ if eq(parameters.productFlavors, 'Local') }}:
    - pwsh: echo "##vso[task.setvariable variable=AssembleTask;]assembleLocal${{ parameters.signingConfigurations }}"
      displayName: Generate Assemble Local Task
  - task: CmdLine@1
    displayName: Set MVN AccessToken in Environment
    inputs:
      filename: echo
      arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN]$(AndroidAuthClientInternalMavenAccessToken)'
  - task: Gradle@1
    name: Gradle1
    displayName: Assemble BrokerHost
    inputs:
      tasks: brokerHost:clean brokerHost:$(AssembleTask)
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
      gradleWrapperFile: $(Agent.BuildDirectory)/android-complete/gradlew
      cwd: $(Agent.BuildDirectory)/android-complete
  - task: CopyFiles@2
    inputs:
      SourceFolder: $(Agent.BuildDirectory)/android-complete/broker/userapp/build/outputs/apk
      targetFolder: $(Build.ArtifactStagingDirectory)
      contents: '**/*.apk'
      flattenFolders: true
  - task: PublishPipelineArtifact@1
    displayName: Publish Broker Host APK (Pipeline Artifact)
    inputs:
      targetPath: $(Agent.BuildDirectory)/android-complete/broker/userapp/build/outputs/apk/${{ lower(parameters.productFlavors) }}/${{ lower(parameters.signingConfigurations) }}
      artifactName: BrokerHost
      patterns: '**/*.apk'
  - task: PublishBuildArtifacts@1
    displayName: Publish Broker Host APK (Build Artifact)
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: BrokerHostAPK
      
...
