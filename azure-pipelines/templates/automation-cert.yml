# File: automation-cert.yml

steps:
- task: AzureKeyVault@2
  displayName: 'Azure Key Vault: Download Cert for Automation'
  inputs:
    azureSubscription: 'AuthSdkResourceManager'
    KeyVaultName: 'msidlabs'
    #setting secrets filter to fetch only MSIDLABCertificate cert from the vault
    SecretsFilter: 'LabAuth'
- task: PowerShell@2
  displayName: Install Automation Cert
  inputs:
    targetType: inline
    script: >
      $kvSecretBytes = [System.Convert]::FromBase64String('$(LabAuth)')
      
      Write-Output 'Secret Bytes'

      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      
      Write-Output 'Cert Collection'

      $certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
      
      Write-Output "Import"

      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)
      
      Write-Output "Protected Bytes"

      $pfxPath = '$(Build.SourcesDirectory)' + "/LabAuth.pfx"
      
      Write-Output "Set Pfx Path"

      [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)
      
      Write-Host "Wrote to System IO"

      $certPathVar = $pfxPath -replace "\\", "/"
      
      if([System.IO.File]::Exists($pfxPath)) {
        Write-Host "PFX file created successfully at $pfxPath"
      } else {
        Write-Error "Failed to create PFX file at $pfxPath"
      } 

      Write-Host "##vso[task.setvariable variable=LabVaultAppCert]$certPathVar"    
