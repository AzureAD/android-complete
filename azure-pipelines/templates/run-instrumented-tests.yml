# File: azure-pipelines\templates\run-instrumented-tests.yml
# Description: Template to run Instrumented test.

parameters:
# Name of the git project we want to checkout.
- name: gitProject
  default: self
# Name of the gradle project in which we want to run the instrumented tests.
- name: projectName
  # Build variant of your project
- name: projectVariantName
  default: LocalDebug
  # Specifies the command line options that will be passed to the Gradle wrapper.
- name: gradleOptions
  default: -Psugar=true
# https://developer.android.com/studio/releases/platforms
- name: androidAPILevel
  default: 30
# https://developer.android.com/ndk/guides/abis
- name: androidABI
  default: x86_64
# Variant corresponds to specific features implemented by the system image; possible values include google_apis, android_wear.
- name: androidVariant
  default: google_apis
# Key used to store the access token, AT for the Android DevX Feed.
- name: accessTokenKey
  default: none

jobs:
- job:
  timeoutInMinutes: 120
  displayName: Run ${{ parameters.projectName }} ${{ parameters.projectVariantName }} instrumented test
  pool:
    vmImage: macOS-latest
  variables:
  - name: android.system.image
    value: system-images;android-${{ parameters.androidAPIlevel }};${{ parameters.androidVariant }};${{ parameters.androidABI }}
  - name: project.variant
    value: ${{ parameters.projectVariantName }}
  steps:
  - checkout: ${{ parameters.gitProject }}
    clean: true
    persistCredentials: True
    submodules: recursive
  - script: echo "##vso[build.addbuildtag]projectVariant=$(project.variant) AndroidSystemImage=$(android.system.image)"
    displayName: Create tag
  - ${{ if ne(parameters.accessTokenKey, 'none') }}:
    - script: echo "##vso[task.setvariable variable=${{ parameters.accessTokenKey }}]$(System.AccessToken)"
      displayName: Set AccessToken
  - script: |
      #!/usr/bin/env bash
      echo Starting android emulator
      echo See https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops#test-on-the-android-emulator
      echo See https://developer.android.com/studio/command-line/sdkmanager
      echo See https://developer.android.com/studio/command-line/avdmanager
      echo See https://developer.android.com/studio/run/emulator-commandline
      echo See https://developer.android.com/studio/command-line/adb

      # Install AVD files
      echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install $ANDROID_SYSTEM_IMAGE

      # Create emulator
      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n android_emulator -k $ANDROID_SYSTEM_IMAGE --force

      $ANDROID_HOME/emulator/emulator -list-avds

      echo "Starting emulator"

      # Start emulator in background
      nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -no-window -no-audio -wipe-data -no-snapshot > /dev/null 2>&1 &
      $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      $ANDROID_HOME/platform-tools/adb devices

      echo "Emulator started"
    displayName: 'Starting android emulator'
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      options: ${{ parameters.gradleOptions }}
      tasks: '${{ parameters.projectName }}:connected${{ parameters.projectVariantName }}AndroidTest'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'