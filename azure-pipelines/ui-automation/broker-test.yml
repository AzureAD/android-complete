# run broker UI automation testcases
# Variable: 'ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME' was defined in the Variables tab
# Variable: 'gCloudProjectId' was defined in the Variables tab
# Variable: 'mvnAccessToken' was defined in the Variables tab
name: $(Build.BuildId)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

resources:
  repositories:
  - repository: msal
    type: github
    name: AzureAD/microsoft-authentication-library-for-android
    ref: $(msal_branch)
    endpoint: ANDROID_GITHUB
  - repository: broker
    type: github
    name: AzureAD/ad-accounts-for-android
    ref: $(broker_branch)
    endpoint: ANDROID_GITHUB

variables:
  engineeringProjectId: 'fac9d424-53d2-45c0-91b5-ef6ba7a6bf26'
  azureSamplePipelineId: 1458
  msalApp: msalAutomationApp.apk
  msalTestApp: msalAutomationAppAndroidTest.apk
  brokerApp: brokerAutomationApp.apk
  brokerTestApp: brokerAutomationAppAndroidTest.apk
  azureSampleApk: AzureSample.apk
  companyPortalApk: CompanyPortal.apk
  authenticatorApk: Authenticator.apk
  deviceId: flame
  deviceAndroidVersion: 29
  firebaseTimeout: 45m
  resultsHistoryName: Broker Release
  resultsDir: "Broker-Release-$(Build.BuildId)-$(Build.BuildNumber)"

parameters:
- name: companyPortalLink
  displayName: Company Portal RC Link
  type: string
- name: authenticatorLink
  displayName: Authenticator RC Link
  type: string

stages:
  # msalautomationapp
- stage: 'msalautomationapp'
  displayName: MSAL Automation app
  jobs: 
  - job: 'msalautomationapp'
    displayName: MSAL Automation app
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: msal
      clean: true
      submodules: recursive
      persistCredentials: True
    - task: AzureKeyVault@2
      displayName: 'Get Key vault AndroidAutomationRunnerAppSecret'
      inputs:
        azureSubscription: 'MSIDLABS_ANDROID_KV'
        KeyVaultName: 'ADALTestInfo'
        SecretsFilter: 'AndroidAutomationRunnerAppSecret'
        RunAsPreJob: false
    - task: Gradle@1
      displayName: 'Assemble MSAL Automation App'
      inputs:
        tasks: clean msalautomationapp:assembleDistAutoBrokerDebug -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PbrokerSource=LocalApk
        publishJUnitResults: false
    - task: Gradle@1
      displayName: 'Assemble MSAL Automation App Instrumented Tests'
      inputs:
        tasks: 'msalautomationapp:assembleDistAutoBrokerDebugAndroidTest -PlabSecret=$(AndroidAutomationRunnerAppSecret)'
        publishJUnitResults: false
      - task: CopyFiles@2
        displayName: 'Copy apks for later use in the pipeline'
        inputs:
          contents: '$(Build.SourcesDirectory)/msalautomationapp/build/outputs/apk/**'
          targetFolder: '$(Build.ArtifactStagingDirectory)/msal'
      - publish: '$(Build.ArtifactStagingDirectory)/msal'
        displayName: 'Publish apks for later use'
        artifact: msalautomationapks
  # brokerautomationapp
- stage: 'brokerautomationapp'
  displayName: Broker Automation app
  jobs: 
  - job: 'brokerautomationapp'
    displayName: Broker Automation app
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: broker
      clean: true
      submodules: recursive
      persistCredentials: True
    - task: AzureKeyVault@2
      displayName: 'Get Key vault AndroidAutomationRunnerAppSecret'
      inputs:
        azureSubscription: 'MSIDLABS_ANDROID_KV'
        KeyVaultName: 'ADALTestInfo'
        SecretsFilter: 'AndroidAutomationRunnerAppSecret'
        RunAsPreJob: false
    - task: Gradle@1
      displayName: 'Assemble Broker Automation App'
      inputs:
        tasks: clean brokerautomationapp:assembleDistAutoBrokerDebug -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PbrokerSource=LocalApk
        publishJUnitResults: false
    - task: Gradle@1
      displayName: 'Assemble Broker Automation App Instrumented Tests'
      inputs:
        tasks: 'brokerautomationapp:assembleDistAutoBrokerDebugAndroidTest -PlabSecret=$(AndroidAutomationRunnerAppSecret)'
        publishJUnitResults: false
      - task: CopyFiles@2
        displayName: 'Copy apks for later use in the pipeline'
        inputs:
          contents: '$(Build.SourcesDirectory)/brokerautomationapp/build/outputs/apk/**'
          targetFolder: '$(Build.ArtifactStagingDirectory)/broker'
      - publish: '$(Build.ArtifactStagingDirectory)/broker'
        displayName: 'Publish apks for later use'
        artifact: brokerautomationapks
  # Brokers
- stage: 'brokers'
  displayName: Download Brokers and Azure Sample
  jobs: 
  - job: 'download_brokers'
    displayName: Download Brokers
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download latest Azure Sample'
      inputs:
        buildType: 'specific'
        project: '$(engineeringProjectId)'
        definition: '$(azureSamplePipelineId)'
        artifactName: AzureSample
        itemPattern: '**/*.apk'
        targetPath: ''$(Build.ArtifactStagingDirectory)/azuresample'
        buildVersionToDownload: 'latest'
    - script: curl -L -o $(authenticatorApk) "${{ parameters.authenticatorLink }}"
      displayName: 'Download Authenticator'
      workingDirectory: '$(Build.ArtifactStagingDirectory)/cpauth'
    - script:  curl -L -o $(companyPortalApk) "${{ parameters.companyPortalLink }}"
      displayName: 'Download Company Portal'
      workingDirectory: '$(Build.ArtifactStagingDirectory)/cpauth'
    - publish: $(Build.ArtifactStagingDirectory)/cpauth
      displayName: 'Publish Broker apks for later use'
      artifactName: brokerapks
    - publish: $(Build.ArtifactStagingDirectory)/azuresample
      displayName: 'Publish Azure Sample apk for later use'
      artifactName: azuresample
  # test
- stage: 'msal_with_broker'
  dependsOn:
  - msalautomationapp
  - brokerautomationapp
  - brokers
  displayName: Running MSAL with Broker Test Plan
  jobs: 
  - job: 'msal_with_broker'
    displayName: Running MSAL with Broker Test Plan
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: none
    - task: DownloadSecureFile@1
      displayName: 'Download Firebase Service Account Key File'
      name: gcServiceAccountKey
      inputs:
        secureFile: AndroidFirebaseServiceAccountKey.json
        retryCount: 5
  # Download APKs
    - download: current
    - script: ls -lh *.apk
      displayName: 'Rename APKs'




  # Firebase tasks
#  - script: gcloud version
#    displayName: 'Check gcloud version'
#  - task: Bash@3
#    displayName: Run UI Automation on Firebase
#    inputs:
#      targetType: inline
#      script: |
#        gcloud auth activate-service-account --key-file "$(gcServiceAccountKey.secureFilePath)"
#        gcloud config set project $(gCloudProjectId)
#        gcloud firebase test android run \
#          --type instrumentation \
#          --app $(Build.StagingDirectory)/$(app) \
#          --test $(Build.StagingDirectory)/$(testApp) \
#          --device "model=$(deviceId),version=$(deviceAndroidVersion)" \
#          --timeout "$(firebaseTimeout)" \
#          --other-files \
#          "/data/local/tmp/$(brokerHostRcApk)=$(Build.StagingDirectory)/$(brokerHostRcApk),\
#          /data/local/tmp/$(brokerHostprodApk)=$(Build.StagingDirectory)/$(brokerHostprodApk),\
#          /data/local/tmp/$(companyPortalApk)=$(Build.StagingDirectory)/$(companyPortalApk),\
#          /data/local/tmp/$(authenticatorApk)=$(Build.StagingDirectory)/$(authenticatorApk),\
#          /data/local/tmp/$(azureSampleApk)=$(Build.StagingDirectory)/$(azureSampleApk)" \
#          --results-dir $(resultsDir) \
#          --directories-to-pull "/sdcard" \
#          --use-orchestrator \
#          --environment-variables clearPackageData=true \
#          --results-history-name "$(resultsHistoryName)" \
#          --test-targets "package com.microsoft.identity.client.msal.automationapp.testpass.broker.wpj"
#  - script: gsutil cp gs://test-lab-ffz6x9pu2y62a-is0rq7a7rwdhi/$(resultsDir)/$(deviceId)-$(deviceAndroidVersion)-en-portrait/test_result_1.xml $(Build.SourcesDirectory)
#    displayName: Download Test Result File
#    condition: succeededOrFailed()
#  - task: PublishTestResults@2
#    displayName: Publish Test Results to ADO
#    condition: succeededOrFailed()
#    inputs:
#      testResultsFiles: '*test_result*.xml'
#      searchFolder: $(Build.SourcesDirectory)
#      testRunTitle: 'MSAL UI Automation - Build # $(Build.BuildNumber)'
