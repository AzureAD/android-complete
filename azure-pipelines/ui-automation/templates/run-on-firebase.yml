parameters:
  - name: automationAppApkPath
    type: string
  - name: automationAppTestApkPath
    type: string
  - name: testTargetPackages
    type: string
  - name: extraTarget
    type: string
  - name: resultsHistoryName
    type: string
  - name: otherFiles
    type: string
  - name: resultsDir
    type: string
  - name: firebaseTimeout
    type: string
    default: 45m
  - name: firebaseDeviceId
    type: string
  - name: firebaseDeviceAndroidVersion
    type: string
  - name: testRunTitle
    type: string
  - name: jobTitle
    type: string
    default: run_on_firebase
  - name: displayNamePrefix
    type: string
    default: " "

resources:
  repositories:
    - repository: common
      type: github
      name: AzureAD/microsoft-authentication-library-common-for-android
      ref: dev
      endpoint: ANDROID_GITHUB

jobs:
  - job: ${{ parameters.jobTitle }}
    displayName: ${{ parameters.displayNamePrefix }} Running Test Suite on Firebase
    timeoutInMinutes: 90
    pool:
      name: Hosted Windows 2019 with VS2019
    steps:
      - checkout: none
      - template: azure-pipelines/templates/steps/automation-cert.yml@common
      - task: DownloadSecureFile@1
        displayName: 'Download Firebase Service Account Key File'
        name: gcServiceAccountKey
        inputs:
          secureFile: AndroidFirebaseServiceAccountKey.json
          retryCount: 5
      - download: current
      - script: |
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get purge man-db
          sudo apt-get --allow-downgrades install google-cloud-sdk=417.0.1-0
          gcloud version
        displayName: 'Check gcloud version'
      - task: Bash@3
        name: runUiAutomation
        displayName: Run UI Automation on Firebase
        inputs:
          targetType: inline
          script: |
            gcloud version
            gcloud auth activate-service-account --key-file "$(gcServiceAccountKey.secureFilePath)"
            gcloud config set project "$(gCloudProjectId)"
            gcloud firebase test android models list
            gcloud firebase test android run \
              --type instrumentation \
              --app "${{ parameters.automationAppApkPath }}" \
              --test "${{ parameters.automationAppTestApkPath }}" \
              --auto-google-login \
              --device model=${{ parameters.firebaseDeviceId }},version=${{ parameters.firebaseDeviceAndroidVersion }},locale=en,orientation=portrait \
              --timeout "${{ parameters.firebaseTimeout }}" \
              --other-files ${{ parameters.otherFiles }} \
              --results-dir "${{ parameters.resultsDir }}" \
              --directories-to-pull /sdcard,/data/local/tmp \
              --use-orchestrator \
              --environment-variables "clearPackageData=true" \
              --results-history-name "${{ parameters.resultsHistoryName }}" \
              --test-targets "${{ parameters.testTargetPackages }}, ${{ parameters.extraTarget }}"
      - script: gsutil cp "gs://test-lab-ffz6x9pu2y62a-is0rq7a7rwdhi/${{ parameters.resultsDir }}/${{ parameters.firebaseDeviceId }}-${{ parameters.firebaseDeviceAndroidVersion }}-en-portrait/test_result_1.xml" "$(Build.SourcesDirectory)"
        displayName: Download Test Result File
        condition: succeededOrFailed()
      - task: PublishTestResults@2
        displayName: Publish Test Results to ADO
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '*test_result*.xml'
          searchFolder: $(Build.SourcesDirectory)
          testRunTitle: '${{ parameters.testRunTitle }}'