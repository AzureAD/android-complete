parameters:
  - name: brokerApp
    type: string
    default: 'AutoBroker'
    values:
      - BrokerHost
      - BrokerMicrosoftAuthenticator
      - BrokerCompanyPortal
      - AutoBroker
  - name: msalFlavor
    type: string
    default: 'Local'
    values:
      - Local
      - Dist
  - name: brokerSource
    type: string
    default: LocalApk
    values:
      - LocalApk
      - PlayStore
  - name: brokerUpdateSource
    type: string
    default: LocalApk
    values:
      - LocalApk
      - PlayStore
  - name: msalVersion
    displayName: MSAL Version
    type: string
    default: ""
  - name: packageVariant
    displayName: Package Variant
    type: string
    default: PROD
    values:
      - PROD
      - RC
  - name: artifactName
    type: string
    default: "msalautomationapks"
  - name: preInstallLtw
    type: boolean
    default: false

jobs:
  - job: msalautomationapp${{ parameters.packageVariant }}${{ parameters.msalFlavor }}
    displayName: Build and Publish MSAL Automation ${{ parameters.packageVariant }} ${{ parameters.msalFlavor }} app
    pool:
      vmImage: ubuntu-latest
    variables:
      - group: MSIDLABVARS
      - name: LabAppCert
        value: "/data/local/tmp/LabAuth.pfx"
    steps:
      - checkout: msal
        clean: true
        submodules: recursive
        persistCredentials: True
      - bash: |
          echo "##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN]$(System.AccessToken)"
        displayName: Set MVN Access Token in Environment
      - task: PowerShell@2
        displayName: Generate Assemble Dist Task
        inputs:
          targetType: inline
          script: |
            $assembleTask = "msalautomationapp:assemble${{ parameters.msalFlavor }}${{ parameters.brokerApp }}Debug -PlabSecret=$(LabAppCert) -PbrokerSource=${{ parameters.brokerSource }} -PbrokerUpdateSource=${{ parameters.brokerUpdateSource }}"
            if (("${{ parameters.msalVersion }}" -ne "")) {
                $assembleTask = $assembleTask + " -PdistMsalVersion=" + "${{ parameters.msalVersion }}"
            }
            if ("${{ parameters.preInstallLtw }}" -eq "True") {
                $assembleTask = $assembleTask + " -PpreInstallLtw=true"
            }
            Write-Host "##vso[task.setvariable variable=AssembleTask;]$assembleTask"
      - task: Gradle@2
        displayName: 'Assemble MSAL Automation App'
        inputs:
          tasks: msalautomationapp:clean $(AssembleTask)
          publishJUnitResults: false
      - task: PowerShell@2
        displayName: Generate Assemble Test Task
        inputs:
          targetType: inline
          script: |
            $assembleTestTask = "msalautomationapp:assemble${{ parameters.msalFlavor }}${{ parameters.brokerApp }}DebugAndroidTest -PlabSecret=$(LabAppCert)"
            if (("${{ parameters.msalVersion }}" -ne "")) {
                $assembleTestTask = $assembleTestTask + " -PdistMsalVersion=" + "${{ parameters.msalVersion }}"
            }
            if ("${{ parameters.preInstallLtw }}" -eq "True") {
                $assembleTestTask = $assembleTestTask + " -PpreInstallLtw=true"
            }
            Write-Host "##vso[task.setvariable variable=AssembleTestTask;]$assembleTestTask"
      - task: Gradle@2
        displayName: 'Assemble MSAL Automation App Instrumented Tests'
        inputs:
          tasks: $(AssembleTestTask)
          publishJUnitResults: false
      - task: CopyFiles@2
        displayName: 'Copy apks for later use in the pipeline'
        inputs:
          flattenFolders: true
          contents: '$(Build.SourcesDirectory)/msalautomationapp/build/outputs/apk/**/*.apk'
          targetFolder: '$(Build.ArtifactStagingDirectory)/msal'
      - publish: '$(Build.ArtifactStagingDirectory)/msal'
        displayName: 'Publish apks for later use'
        artifact: msalautomationapks-${{ parameters.brokerApp }}-${{ upper(parameters.packageVariant) }}-${{ parameters.brokerSource }}
