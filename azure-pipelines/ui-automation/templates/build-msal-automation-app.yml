parameters:
  - name: brokerApp
    type: string
    default: 'AutoBroker'
    values:
      - BrokerHost
      - BrokerMicrosoftAuthenticator
      - BrokerCompanyPortal
      - AutoBroker
  - name: msalFlavor
    type: string
    default: 'Local'
    values:
      - Local
      - Dist
  - name: brokerSource
    displayName: Broker App Installation Source
    type: string
    default: LocalApk
    values:
      - LocalApk
      - PlayStore
  - name: msalVersion
    displayName: MSAL Version
    type: string
  - name: packageVariant
    displayName: Package Variant
    type: string
    default: PROD
    values:
      - PROD
      - RC

jobs:
  - job: 'msalautomationapp'
    displayName: Build and Publish MSAL Automation app
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: msal
        clean: true
        submodules: recursive
        persistCredentials: True
      - bash: |
          echo "##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN]$(mvnAccessToken)"
        displayName: Set MVN Access Token in Environment
      - task: AzureKeyVault@2
        displayName: 'Get Key vault AndroidAutomationRunnerAppSecret'
        inputs:
          azureSubscription: 'MSIDLABS_ANDROID_KV'
          KeyVaultName: 'ADALTestInfo'
          SecretsFilter: 'AndroidAutomationRunnerAppSecret'
          RunAsPreJob: false
      - task: PowerShell@2
        displayName: Generate Assemble Dist Task
        inputs:
          targetType: inline
          script: |
            $assembleTask = "msalautomationapp:assemble${{ parameters.msalFlavor }}${{ parameters.brokerApp }}Debug -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PbrokerSource=${{ parameters.brokerSource }}"
            if (("${{ parameters.msalVersion }}" -ne "")) {
                $assembleTask = $assembleTask + " -PdistMsalVersion=" + "${{ parameters.msalVersion }}"
            }
            Write-Host "##vso[task.setvariable variable=AssembleTask;]$assembleTask"
      - task: Gradle@2
        displayName: 'Assemble MSAL Automation App'
        inputs:
          tasks: msalautomationapp:clean $(AssembleTask)
          publishJUnitResults: false
      - task: PowerShell@2
          displayName: Generate Assemble Test Task
          inputs:
            targetType: inline
            script: |
              $assembleTestTask = "msalautomationapp:assemble${{ parameters.msalFlavor }}${{ parameters.brokerApp }}DebugAndroidTest -PlabSecret=$(AndroidAutomationRunnerAppSecret)"
              if (("${{ parameters.msalVersion }}" -ne "")) {
                  $assembleTestTask = $assembleTestTask + " -PdistMsalVersion=" + "${{ parameters.msalVersion }}"
              }
              Write-Host "##vso[task.setvariable variable=AssembleTestTask;]$assembleTestTask"
      - task: Gradle@2
        displayName: 'Assemble MSAL Automation App Instrumented Tests'
        inputs:
          tasks: msalautomationapp:clean $(AssembleTestTask)
          publishJUnitResults: false
      - task: CopyFiles@2
        displayName: 'Copy apks for later use in the pipeline'
        inputs:
          flattenFolders: true
          contents: '$(Build.SourcesDirectory)/msalautomationapp/build/outputs/apk/**/*.apk'
          targetFolder: '$(Build.ArtifactStagingDirectory)/msal'
      - publish: '$(Build.ArtifactStagingDirectory)/msal'
        displayName: 'Publish apks for later use'
        artifact: msalautomationapks-${{ upper(parameters.packageVariant) }}-${{ parameters.brokerSource }}
