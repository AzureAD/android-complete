parameters:
  - name: commonVersion
    type: string
  - name: branch
    type: string
    default: dev
  - name: scriptPathFromSource
    type: string
    default: /azure-pipelines/scripts/queue-build.ps1
  - name: serviceConnection
    type: string
#    default: AuthSdkResourceManager
    default: Managed-Identity-WIF-Connection

jobs:
  - job: queueOneAuthTestApp
    displayName: Build and Download OneAuth Test App
    variables:
      - name: project
        value: OneAuth
      - name: definitionId
        value: 6332
      - name: url
        value: https://office.visualstudio.com/
      - name: timeout
        value: 60
      - name: oneAuthProjectId
        value : 'a4d3949e-967a-4298-8b6d-53f45f6b0704'
    timeoutInMinutes: 60
    steps:
      - checkout: self
        persistCredentials: True
      - task: AzureCLI@2
        condition: always()
        displayName: 'Debug repo clone'
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            orgName=https://office.visualstudio.com/
            projectName=OneAuth
            repoName=OneAuth

            if [ "$SYSTEM_DEBUG" == "true" ]; then
                set -x
            fi

            authorizationUriHeader=$(curl -v https://dev.azure.com/$orgName 2>&1 | grep authorization_uri)
            if [ $? -ne 0 ]; then
                echo "Could not connect to org home page: https://dev.azure.com/$orgName.  Did you mistype the orgName?"
                exit 60
            fi
            orgTenant=$(echo "$authorizationUriHeader" | grep -o -E "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}")
            echo "Azure DevOps org is attached to tenant $orgTenant."

            # ensure you are logged in
            accountInfo=$(az account show)
            if [ $? -ne 0 ]; then
                echo "Not logged in to Az CLI or no access to subscription?"
                exit 10
            fi
            userName=$(echo $accountInfo | jq -r ".user.name")
            echo "Az CLI is logged in as $userName, base64($userName)='$(echo $userName|base64)'"
            # echo $accountInfo

            azCliTenant=$(echo $accountInfo | jq -r ".tenantId")
            azCliHomeTenant=$(echo $accountInfo | jq -r ".homeTenantId")
            if [ "$orgTenant" != "$azCliTenant" ]; then
                echo "Azure DevOps org $orgName's tenant $orgTenant does not match Az CLI tenant $azCliTenant."
                exit 20
            fi
            echo "Az CLI tenant matches Azure DevOps tenant."

            if [ "$orgTenant" != "$azCliHomeTenant" ]; then
                echo "Azure DevOps org $orgName's tenant $orgTenant does not match Az CLI home tenant $azCliHomeTenant."
                exit 30
            fi
            echo "Az CLI home tenant matches Azure DevOps tenant."

            # Note that the resoruce is specified to limit the token to Azure DevOps
            aadTokenInfo=$(az account get-access-token --resource "499b84ac-1321-427f-aa17-267ca6975798")
            if [ $? -ne 0 ]; then
                echo "Could not acquire Azure DevOps token."
                exit 40
            fi
            echo "Azure DevOps AAD token acquired.  Expires $(echo $aadTokenInfo | jq -r .expiresOn)"
            aadToken=$(echo $aadTokenInfo | jq -r .accessToken)


            function azdoCall() {
                statusCode=$(curl \
                    -H "Authorization: Bearer $aadToken" \
                    -H "X-TFS-FedAuthRedirect: Suppress" \
                    -H "Accept: application/json" \
                    --dump-header /tmp/headers.txt -o /tmp/body.txt \
                    -s -w "%{http_code}\n" \
                    $1)
                if [ $? -ne 0 ]; then
                    echo "curl failed."
                    exit 1
                fi

                echo "$1 $statusCode $(grep e2eid /tmp/headers.txt)"

                if [ "$statusCode" != "200" ]; then
                    cat /tmp/headers.txt
                    cat /tmp/body.txt
                fi

                return $statusCode
            }

            azdoCall "https://dev.azure.com/$orgName/_apis/projects/?\$top=1&api-version=7.1-preview.4"
            if [ $? -ne 200 ]; then
                echo "Could not list projects. Has your PCA added the Managed Idenitity to the org?"
                exit 50
            fi

                  azdoCall "https://dev.azure.com/$orgName/_apis/projects/$projectName?api-version=7.1-preview.4"
            if [ $? -ne 200 ]; then
                echo "Could not connect to project. Is identity added to project?"
                exit 80
            fi

            azdoCall "https://vsaex.dev.azure.com/$orgName/_apis/MemberEntitlements?%24filter=userType%20eq%20%27managedIdentity%27&%24orderBy=name%20Ascending&api-version=7.1-preview.2"
            if [ $? -ne 200 ]; then
                echo "Could not access managed identity entitlements."
                exit 70
            fi
            entitlement=$(cat /tmp/body.txt | jq ".items[] | select(.member.applicationId==\"$userName\")")
            if [ "$entitlement" == "" ] || [ "$entitlement" == "null" ]; then
                cat /tmp/body.txt 
                azdoCall "https://vsaex.dev.azure.com/$orgName/_apis/MemberEntitlements?%24filter=userType%20eq%20%27application%27&%24orderBy=name%20Ascending&api-version=7.1-preview.2"
                if [ $? -ne 200 ]; then
                    echo "Could not find entitlements for service principals."
                    exit 70
                fi
                entitlement=$(cat /tmp/body.txt | jq ".items[] | select(.member.applicationId==\"$userName\")")
            fi
            if [ "$entitlement" == "" ] || [ "$entitlement" == "null" ]; then
                cat /tmp/body.txt 
                azdoCall "https://vsaex.dev.azure.com/$orgName/_apis/userentitlements?\$filter=name%20eq%20%27$userName%27&api-version=7.1-preview.4"
                if [ $? -ne 200 ]; then
                    echo "Could not find entitlements for user."
                    exit 70
                fi
                entitlement=$(cat /tmp/body.txt | jq '.items[0]')
            fi

            if [ "$entitlement" == "null" ]; then
                echo Could not find entitlements/license for managed identity $userName
                exit 70
            fi

            accountLicenseType=$(echo $entitlement | jq -r .accessLevel.accountLicenseType)
            if [ "$accountLicenseType" == "" ]; then
                echo $entitlement
                echo "Could not determine license type."
                exit 70
            fi

            echo "User has license type '$accountLicenseType'"
            if [ "$accountLicenseType" == "stakeholder" ]; then
                echo $entitlement
                echo "Identity only has stakeholder license.  Has your PCA given the Managed Idenitity a better license?"
                exit 70
            fi
            if [ "$accountLicenseType" == "express" ]; then
                echo $entitlements
                echo "Identity only has basic license.  Has your PCA given the Managed Idenitity a better license?"
                exit 70
            fi

            # Clone the repository
            rm -Rf test_clone
            set -e
            git -c http.extraheader="AUTHORIZATION: bearer $aadToken" \
                clone https://dev.azure.com/$orgName/$projectName/_git/$repoName test_clone
            rm -Rf test_clone
      - task: AzureCLI@2
        displayName: Set up Access Token For OneAuth Pipeline Call
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # if this fails, check out this bash script that includes diagnostics:
            # https://gist.github.com/johnterickson/19f80a3e969e39f1000d118739176e62
            
            # Note that the resource is specified to limit the token to Azure DevOps
            $accessToken = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv

            # Set the access token as a secret, so it doesn't get leaked in the logs
            Write-Host "##vso[task.setsecret]$accessToken"
            Write-Host "##vso[task.setvariable variable=Test-Token]$accessToken"
      - task: PowerShell@2
        displayName: Queue and wait for OneAuth Test App Apk generation pipeline
        name: buildApk
        inputs:
          filePath: '$(Build.SourcesDirectory)${{ parameters.scriptPathFromSource }}'
          arguments: '-OrganizationUrl "$(url)" -Project "$(project)" -PipelinePAT "$(Test-Token)" -WaitTimeoutInMinutes $(timeout) -BuildDefinitionId "$(definitionId)" -Branch "${{ parameters.branch }}" -BuildIdOutputVar "oneAuthBuildId"'
          workingDirectory: '$(Build.SourcesDirectory)'
      - task: AzureCLI@2
        displayName: Download OneAuth Artifact with AzureCLI
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            Write-Host "Downloading artifact from build id $(oneAuthBuildId)"
            az pipelines runs artifact download --artifact-name Non-Container-OneAuthTestApp-arm64-v8a --path $(Build.ArtifactStagingDirectory)/OneAuthTestApp --run-id $(oneAuthBuildId) --org $(url) --project $(project)
      - publish: $(Build.ArtifactStagingDirectory)/OneAuthTestApp
        displayName: 'Publish OneAuth Test apk for later use'
        artifact: oneauthtestapp
