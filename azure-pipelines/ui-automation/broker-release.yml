# Monthly Release Pipeline
# Variables
# ---------
# common4jProjVersionParam: passes common4jVersion in the projVersion param
# common4jVersionParam: passes Common4jVersion param
# broker4jProjVersionParam: passes broker4jVersion in the projVersion param
# broker4jVersionParam: passes Broker4jVersion
# commonProjVersionParam: passes commonVersion in projVersion param
# commonVersionParam: passes CommonVersion
# msalProjVersionParam:  passes msalVersion in projVersion param
# adAccountsProjVersionParam: passes adAccountsVersion in projVersion param
# adalProjVersionParam: passes adal Version in projVersion param
# androidProjectDependencyParam: extrea android gradle configs
# javaProjectDependencyParam: extra java gradle configs
# msazureServiceConnection: ms azure service connection `AndroidBroker-CI`
# msazureFeedName: name of msazure feed which is `Android-Broker`
# brokerApp: brokerautomationapp-dist-AutoBroker-debug.apk
# brokerTestApp: brokerautomationapp-dist-AutoBroker-debug-androidTest.apk
# companyPortalApk: name of the Company Portal apk which is `com.microsoft.windowsintune.companyportal-signed.apk`
# authenticatorApk: name of the MS Authenticator apk which is `app-production-universal-release-signed.apk`
# oldAuthenticatorApk: old version of the authenticator app which is `Authenticator-4.1.0-RC.apk`
# outlookApk: Outlook apk name
# teamsApk: Teams apk name
# wordApk: Word apk name
# edgeApk: Edge apk name
# resultsHistoryName: Broker Release
# https://dev.azure.com/IdentityDivision/Engineering/_build?definitionId=1801&_a=summary
name: $(Build.BuildId)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

parameters:
# Stage control boolean parameters
- name: shouldBuildLibraries
  displayName: Build Libraries?
  type: boolean
  default: False
- name: shouldRunUnitTests
  displayName: Run Unit Tests?
  type: boolean
  default: True
- name: shouldRunInstrumentedTests
  displayName: Run Instrumented Tests?
  type: boolean
  default: True
- name: shouldPublishLibraries
  displayName: Publish Libraries?
  type: boolean
  default: True
- name: shouldPromoteLibraries
  displayName: Promote Libraries?
  type: boolean
  default: False
- name: shouldBuildBrokersApks
  displayName: Build Broker Apks? (Authenticator and Company Portal)
  type: boolean
  default: False
- name: shouldRunUiValidation
  displayName: Run E2E UI Validation?
  type: boolean
  default: False
- name: shouldBuildTestingLibraries
  displayName: Build & Publish Testing libs?
  type: boolean
  default: False

# Flighting Parameters
- name: flightingSelection
  displayName: Flighting
  type: string
  default: "ECS"
  values:
    - Local
    - ECS
- name: flightingValue
  displayName: Flight Json-String (not active with ECS flighting)
  type: string
  default: ""
- name: flagsValue
  displayName: Flags to Pass
  type: string
  default: ""

# RC Library Versioning Parameters
- name: msalVersionRC
  displayName: MSAL RC Version
  type: string
- name: commonVersionRC
  displayName: Common RC Version
  type: string
- name: common4jVersionRC
  displayName: Common4j RC Version
  type: string
- name: adAccountsVersionRC
  displayName: Broker RC Version
  type: string
- name: broker4jVersionRC
  displayName: Broker4j RC Version
  type: string
- name: adalVersionRC
  displayName: ADAL RC Version
  type: string

# PROD Library Versioning Parameters
- name: msalVersionPROD
  displayName: MSAL PROD Version
  type: string
- name: commonVersionPROD
  displayName: Common PROD Version
  type: string
- name: adAccountsVersionPROD
  displayName: Broker PROD Version
  type: string

# PROD versioning parameters
- name: prodAuthenticatorVersion
  displayName: PROD Authenticator Version
  type: string
  default: '*'
- name: prodCompanyPortalVersion
  displayName: PROD Company Portal Version
  type: string
  default: '*'

# Branch parameters
- name: msalBranch
  displayName: MSAL Branch
  type: string
  default: 'dev'
- name: adalBranch
  displayName: ADAL Branch
  type: string
  default: 'dev'
- name: commonBranch
  displayName: Common Branch
  type: string
  default: 'dev'
- name: brokerBranch
  displayName: Broker Branch
  type: string
  default: 'dev'

resources:
  repositories:
  - repository: msal
    type: github
    name: AzureAD/microsoft-authentication-library-for-android
    ref: ${{ parameters.msalBranch }}
    endpoint: ANDROID_GITHUB
  - repository: broker
    type: github
    name: AzureAD/ad-accounts-for-android
    ref: ${{ parameters.brokerBranch }}
    endpoint: ANDROID_GITHUB
  - repository: azuresample
    type: github
    name: Azure-Samples/ms-identity-android-java
    ref: master
    endpoint: ANDROID_GITHUB
  - repository: common
    type: github
    name: AzureAD/microsoft-authentication-library-common-for-android
    ref: ${{ parameters.commonBranch }}
    endpoint: ANDROID_GITHUB
  - repository: adal
    type: github
    name: AzureAD/azure-activedirectory-library-for-android
    ref: ${{ parameters.adalBranch }}
    endpoint: ANDROID_GITHUB

variables:
  common4jProjVersionParam: -PprojVersion=${{ parameters.common4jVersionRC }}
  common4jVersionParam: -PdistCommon4jVersion=${{ parameters.common4jVersionRC }}
  broker4jProjVersionParam: -PprojVersion=${{ parameters.broker4jVersionRC }}
  broker4jVersionParam: -PdistBroker4jVersion=${{ parameters.broker4jVersionRC }}
  commonProjVersionParam: -PprojVersion=${{ parameters.commonVersionRC }}
  commonVersionParam: -PdistCommonVersion=${{ parameters.commonVersionRC }}
  msalProjVersionParam: -PprojVersion=${{ parameters.msalVersionRC }}
  adAccountsProjVersionParam: -PprojVersion=${{ parameters.adAccountsVersionRC }}
  adalProjVersionParam: -PprojVersion=${{ parameters.adalVersionRC }}
  androidProjectDependencyParam: --configuration=distReleaseRuntimeClasspath --write-locks
  javaProjectDependencyParam: --configuration=runtimeClasspath --write-locks
  msazureServiceConnection: AndroidBroker-CI
  msazureFeedName: Android-Broker
  brokerApp: brokerautomationapp-dist-AutoBroker-debug.apk
  brokerTestApp: brokerautomationapp-dist-AutoBroker-debug-androidTest.apk
  companyPortalApk: com.microsoft.windowsintune.companyportal-signed.apk
  authenticatorApk: app-production-universal-release-signed.apk
  oldAuthenticatorApk: Authenticator-4.1.0-RC.apk
  outlookApk: Outlook.apk
  teamsApk: Teams.apk
  wordApk: Word.apk
  edgeApk: Edge.apk
  resultsHistoryName: Broker Release

stages:
- stage: 'addTags'
  displayName: Tag Pipeline
  dependsOn: []
  variables:
    - name: flightsTag
      value: $[replace(parameters['broker4j_flights'], ':', ' ')]
  jobs:
  - job: addTags
    displayName: Add tags for flights
    steps:
    - task: PowerShell@2
      displayName: Run Tagging Script
      inputs:
        targetType: inline
        script: |
          Write-Host "##vso[build.addbuildtag]PROD_MSAL:(${{ parameters.msalVersionPROD }})-->RC_MSAL:${{ parameters.msalVersionRC }}"
          
          Write-Host "##vso[build.addbuildtag]PROD_Common:(${{ parameters.commonVersionPROD }})-->RC_Common:${{ parameters.commonVersionRC }}"
          Write-Host "##vso[build.addbuildtag]RC_Common4j:${{ parameters.common4jVersionRC }}"
          
          Write-Host "##vso[build.addbuildtag]PROD_AADAuthenticator:(${{ parameters.adAccountsVersionPROD }})-->RC_AADAuthenticator:${{ parameters.adAccountsVersionRC }}"
          Write-Host "##vso[build.addbuildtag]RC_Broker4j:${{ parameters.broker4jVersionRC }}"
          
          Write-Host "##vso[build.addbuildtag]RC_ADAL:(${{ parameters.adalVersionRC }})"
          
          if (${{ parameters.flightingSelection }} -eq "Local") {
            Write-Host "##vso[build.addbuildtag]Local_Flighting"
            Write-Host "##vso[build.addbuildtag]Flights_Passed:$(flightsTag)"
          } else {
            Write-Host "##vso[build.addbuildtag]ECS_Flighting"
          }
          
          if (${{ parameters.flagsValue }} -eq "") {
            Write-Host "##vso[build.addbuildtag]No Additional Flags Passed"
          } else {
            Write-Host "##vso[build.addbuildtag]Flags Passed: ${{ parameters.flagsValue }}"
          }

# Package generation
# Testing Libraries - KeyVault, LabApi, LabApiUtilities, TestUtils, UiAutomationUtilities
- stage: 'publishCommonUtilities'
  displayName: Testing Libraries - Build and publish
  dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildTestingLibraries }}, 'True')
    )
  jobs:
    - job: queue_build
      displayName: Update Testing libraries 
      steps:
        - task: PowerShell@2
          displayName: Queue and wait for testing libraries 
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://identitydivision.visualstudio.com/" -Project "Engineering" -PipelinePAT "$(System.AccessToken)" -BuildDefinitionId "1464"  -Branch "${{ parameters.commonBranch }}"'
            workingDirectory: '$(Build.SourcesDirectory)'
# Common4j - Build and publish
- stage: 'publishCommon4jLibraries'
  displayName: Common4j - Build and publish
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: common
      project: common4j
      testCmd: common4jUnitTestCoverageReport
      dependencyParams: $(javaProjectDependencyParam)
      assembleParams: $(common4jProjVersionParam)
      testParams: $(common4jProjVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(common4jProjVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}
# Common - Build and publish
- stage: 'publishCommonLibraries'
  displayName: Common - Build and publish  
  dependsOn: publishCommon4jLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: common
      project: common
      assembleCmd: assembleDist
      testCmd: distDebugCommonUnitTestCoverageReport
      publishCmd: publish
      dependencyParams:  $(common4jVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(commonProjVersionParam) $(common4jVersionParam)
      testParams: $(commonProjVersionParam) $(common4jVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(commonProjVersionParam) $(common4jVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}
# Broker4j - Build and publish
- stage: 'publishBroker4jLibraries'
  displayName: Broker4j - Build and publish  
  dependsOn: 
  - publishCommon4jLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: broker
      project: broker4j
      testCmd: broker4jUnitTestCoverageReport
      publishCmd: publishAarPublicationToVsts-maven-adal-androidRepository
      dependencyParams: $(common4jVersionParam) $(javaProjectDependencyParam)
      assembleParams: $(broker4jProjVersionParam) $(common4jVersionParam)
      testParams: $(broker4jProjVersionParam) $(common4jVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(broker4jProjVersionParam) $(common4jVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}
# Broker - Build and publish
- stage: 'publishBrokerLibraries'
  displayName: Android Broker - Build and publish
  variables:
  - group: AndroidAuthClientVariables
  - name : powerLiftApiKeyParam
    value : -PpowerLiftApiKey=$(powerliftApiKey)
  - name : brokerOtelAriaTokenParam
    value : -PotelAriaToken=$(otelAriaToken)
  dependsOn: 
  - publishCommonLibraries
  - publishBroker4jLibraries
  - publishCommonUtilities
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: broker
      project: AADAuthenticator
      testCmd: distDebugAADAuthenticatorUnitTestCoverageReport
      assembleCmd: assembleDist
      publishCmd: publishAdAccountsPublicationToVsts-maven-adal-androidRepository
      dependencyParams: $(broker4jVersionParam) $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam) $(brokerOtelAriaTokenParam) $(powerLiftApiKeyParam)
      testParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam) $(powerLiftApiKeyParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      agentImage: 1ES-AndroidPool-EOC
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}
# Msal - Build and publish      
- stage: 'publishMsal'
  displayName: Msal - Build and publish  
  dependsOn: 
  - publishCommonLibraries
  - publishCommonUtilities
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: msal
      project: msal
      assembleCmd: assembleDistRelease
      testCmd: distDebugMsalUnitTestCoverageReport
      publishCmd: publishMsalPublicationToVsts-maven-adal-androidRepository 
      dependencyParams: $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(msalProjVersionParam) $(commonVersionParam)
      testParams: $(msalProjVersionParam) $(commonVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(msalProjVersionParam) $(commonVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROID_MSAL_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}
# Adal - Build and publish
- stage: 'publishAdal'
  displayName: Adal - Build and publish  
  dependsOn: publishCommonLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildLibraries }}, 'True')
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: adal
      project: adal
      assembleCmd: assembleDist
      testCmd: testDistDebugUnitTest
      publishCmd: publishAdalPublicationToVsts-maven-adal-androidRepository 
      dependencyParams: $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(adalProjVersionParam) $(commonVersionParam)
      testParams: $(adalProjVersionParam) $(commonVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true
      publishParams: $(adalProjVersionParam) $(commonVersionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADAL_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADAL_ACCESSTOKEN
      shouldPublish: ${{ parameters.shouldPublishLibraries }}
      shouldRunUnitTests: ${{ parameters.shouldRunUnitTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunInstrumentedTests }}

# Promote Libraries
- stage: 'promoteLibraries'
  displayName: Promote Libraries to PreRelease and Release
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldPromoteLibraries }}, 'True')
    )
  dependsOn:
    - publishAdal
    - publishBrokerLibraries
    - publishMsal
  jobs:
    # Promote to Pre-Release
    - job: promote_to_prerelease
      displayName: Promote all the libraries to Pre-Release
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/promote-packages.ps1'
            arguments: '-PackagingPAT "$(System.AccessToken)" -common4jVersion "${{ parameters.common4jVersionRC }}" -commonVersion "${{ parameters.commonVersionRC }}" -broker4jVersion "${{ parameters.broker4jVersionRC }}" -adAccountsVersion "${{ parameters.adAccountsVersionRC }}" -msalVersion "${{ parameters.msalVersionRC }}" -adalVersion "${{ parameters.adalVersionRC }}" -PromoteToView "Prerelease"'
            workingDirectory: '$(Build.SourcesDirectory)'
    # Promote to Release
    - job: promote_to_release
      displayName: Promote all the libraries to Release
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/promote-packages.ps1'
            arguments: '-PackagingPAT "$(System.AccessToken)" -common4jVersion "${{ parameters.common4jVersionRC }}" -commonVersion "${{ parameters.commonVersionRC }}" -broker4jVersion "${{ parameters.broker4jVersionRC }}" -adAccountsVersion "${{ parameters.adAccountsVersionRC }}" -msalVersion "${{ parameters.msalVersionRC }}" -adalVersion "${{ parameters.adalVersionRC }}" -PromoteToView "Release"'
            workingDirectory: '$(Build.SourcesDirectory)'

# Broker app generation
# Authenticator
- stage: 'queueAuthenticatorBrokerApkPipeline'
  displayName: Authenticator - Queue Build Pipeline
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildBrokersApks }}, 'True')
    )
  dependsOn:
    - promoteLibraries
  jobs:
    - job: queue_build
      displayName: Queue Build for Authenticator RC
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://msazure.visualstudio.com/" -Project "One" -PipelinePAT "$(MSAZURE_BUILD_TOKEN)" -BuildDefinitionId "237369" -PipelineVariablesJson "{ ''AdAccountsVersion'': ''${{ parameters.adAccountsVersionRC }}'', ''CommonVersion'': ''${{ parameters.commonVersionRC }}'', ''MsalVersion'': ''${{ parameters.msalVersionRC }}'', ''AdalVersion'': ''${{ parameters.adalVersionRC }}'' }" -Branch "$(authenticatorBranch)"'
            workingDirectory: '$(Build.SourcesDirectory)'
          name: buildAuthenticator
# Company Portal
- stage: 'queueCompanyPortalBrokerApkPipeline'
  displayName: Company Portal - Queue Build Pipeline
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildBrokersApks }}, 'True')
    )
  dependsOn:
    - promoteLibraries
  jobs:
    - job: queue_build
      displayName: Queue Build for Company Portal RC
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://msazure.visualstudio.com/" -Project "Intune" -PipelinePAT "$(MSAZURE_BUILD_TOKEN)" -BuildDefinitionId "237827" -WaitTimeoutInMinutes 100 -PipelineVariablesJson "{ ''AdAccountsVersion'': ''${{ parameters.adAccountsVersionRC }}'', ''CommonVersion'': ''${{ parameters.commonVersionRC }}'', ''MsalVersion'': ''${{ parameters.msalVersionRC }}''}" -Branch "$(companyPortalBranch)"'
            workingDirectory: '$(Build.SourcesDirectory)'
          name: buildCompanyPortal

# TestApp generation
- stage: 'testappgeneration'
  dependsOn:
    - publishAdal
    - publishCommonLibraries
    - publishMsal
    - publishBrokerLibraries
    - promoteLibraries
  displayName: Generate Test Apps
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - template: ./templates/build-azure-sample-app.yml
      parameters:
        productFlavors: External
        signingConfigurations: Release
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-azure-sample-app.yml
      parameters:
        productFlavors: External
        signingConfigurations: Release
        msalVersion: ${{ parameters.msalVersionPROD }}
        packageVariant: PROD
    - template: ./templates/build-broker-host.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Release
        msalVersion: ${{ parameters.msalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        adAccountsVersion: ${{ parameters.adAccountsVersionRC }}
        adalVersion: ${{ parameters.adalVersionRC }}
        packageVariant: RC
        publishToFeed: True
        publishingPackageName: "com.microsoft.identity.testuserapp.prod"
        publishVersion: ${{ parameters.adAccountsVersionRC }}
    - template: ./templates/build-broker-host.yml
      parameters:
        productFlavors: Local
        signingConfigurations: Debug
        msalVersion: ${{ parameters.msalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        adAccountsVersion: ${{ parameters.adAccountsVersionRC }}
        adalVersion: ${{ parameters.adalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        msalFlavor: Dist
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        msalFlavor: Dist
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: ${{ parameters.msalVersionPROD }}
        packageVariant: PROD
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: BrokerHost
        msalFlavor: Local
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: ${{ parameters.msalVersionPROD }}
        packageVariant: PROD
    - template: ./templates/build-broker-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        brokerFlavor: Dist
        brokerSource: LocalApk
        adalVersion: ${{ parameters.adalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
    - template: ./templates/build-msal-test-app.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Debug
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-adal-test-app.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Debug
        adalVersion: ${{ parameters.adalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        packageVariant: RC
# Download First Party Apps
- stage: 'firstpartyapps'
  dependsOn:
  - promoteLibraries # adding this dependency to improve pipeline readability
  displayName: Download First Party Apps (Outlook, Teams, Word, Edge)
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - template: ./templates/download-first-party-apps.yml
# Download Brokers
- stage: 'download_brokers'
  dependsOn:
  - queueAuthenticatorBrokerApkPipeline
  - queueCompanyPortalBrokerApkPipeline
  - testappgeneration
  displayName: Download PROD & RC Brokers
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - template: ./templates/download-brokers.yml
      parameters:
        msazureServiceConnection: '$(msazureServiceConnection)'
        msazureFeedName: '$(msazureFeedName)'
        authenticatorVersionRC: $(rcAuthenticatorVersion)
        authenticatorVersionPROD: ${{ parameters.prodAuthenticatorVersion }}
        oldAuthenticatorVersion: $(oldAuthenticatorVersion)
        companyPortalVersionRC: $(rcCompanyPortalVersion)
        companyPortalVersionPROD: ${{ parameters.prodCompanyPortalVersion }}
        prodBrokerHostVersion: ${{ parameters.adAccountsVersionPROD}}

# ADAL with Broker (API 30+)
- stage: 'adal_with_broker_high_api'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition:  |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: RC ADAL with RC Broker UI Automation
  jobs:
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/brokerautomationapks/$(brokerApp)"
        automationAppTestApkPath: "$(Pipeline.Workspace)/brokerautomationapks/$(brokertestApp)"
        testTargetPackages: $(brokerTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "brokerautomationapp-testpass-adal&basic-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/$(companyPortalApk),\
                      /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/$(authenticatorApk),\
                      /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                      /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                      /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                      /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                      /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                      /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                      /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "Broker(ADAL) UI Automation - Build (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        flankShards: $(flankShards)
        displayNamePrefix: "(API 30+) "

# RC MSAL - PROD Broker
- stage: 'RC_msal_PROD_broker'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: RC MSAL with PROD Broker UI Automation
  jobs:
    # RC MSAL with PROD Broker API 30+
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/prod/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/prod/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/prod/brokerHost-dist-release.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "RC MSAL - PROD Broker (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, notAnnotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        flankShards: $(flankShards)
        jobTitle: run_on_flank_with_flank_high_api
        displayNamePrefix: "(API 30+) "
    # RC MSAL with PROD Broker API 29-
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-lowapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/prod/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/prod/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/prod/brokerHost-dist-release.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdLow)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionLow)
        testRunTitle: "RC MSAL - PROD Broker (API $(firebaseDeviceAndroidVersionLow)) # $(Build.BuildNumber)"
        extraTarget: "annotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        jobTitle: run_on_flank_low_api
        displayNamePrefix: "(API 29-) "

# PROD MSAL - RC Broker
- stage: 'PROD_msal_RC_broker'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: PROD MSAL with RC Broker UI Automation
  jobs:
    # PROD MSAL with RC Broker API 30+
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "PROD-MSAL-RC-Broker-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "PROD MSAL - RC Broker (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, notAnnotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        flankShards: $(flankShards)
        jobTitle: run_on_flank_with_flank_high_api
        displayNamePrefix: "(API 30+) "
    # PROD MSAL with RC Broker API 30+ (Brokerhost Build)
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-BrokerHost-PROD-LocalApk/msalautomationapp-local-BrokerHost-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-BrokerHost-PROD-LocalApk/msalautomationapp-local-BrokerHost-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "PROD-MSAL-RC-BrokerHost-debug-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/OldBrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/brokerHost-local-debug.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Local-RC-debug/brokerHost-local-debug.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "PROD MSAL - RC Broker (BrokerHost tests, debug) (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, annotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        jobTitle: run_on_flank_brokerhost_high_api
        displayNamePrefix: "(API 30+, Brokerhost) "
    # PROD MSAL with RC Broker API 29-
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-lowapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/oldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdLow)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionLow)
        testRunTitle: "PROD MSAL - RC Broker (API $(firebaseDeviceAndroidVersionLow)) # $(Build.BuildNumber)"
        extraTarget: "annotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        jobTitle: run_on_flank_low_api
        displayNamePrefix: "(API 29-) "
