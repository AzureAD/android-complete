# Monthly Release Pipeline
# Variables
# ---------
# common4jProjVersionParam: passes common4jVersion in the projVersion param
# common4jVersionParam: passes Common4jVersion param
# broker4jProjVersionParam: passes broker4jVersion in the projVersion param
# broker4jVersionParam: passes Broker4jVersion
# commonProjVersionParam: passes commonVersion in projVersion param
# commonVersionParam: passes CommonVersion
# msalProjVersionParam:  passes msalVersion in projVersion param
# adAccountsProjVersionParam: passes adAccountsVersion in projVersion param
# adalProjVersionParam: passes adal Version in projVersion param
# androidProjectDependencyParam: extrea android gradle configs
# javaProjectDependencyParam: extra java gradle configs
# msazureServiceConnection: ms azure service connection `AndroidBroker-CI`
# msazureFeedName: name of msazure feed which is `Android-Broker`
# brokerApp: brokerautomationapp-dist-AutoBroker-debug.apk
# brokerTestApp: brokerautomationapp-dist-AutoBroker-debug-androidTest.apk
# companyPortalApk: name of the Company Portal apk which is `com.microsoft.windowsintune.companyportal-signed.apk`
# authenticatorApk: name of the MS Authenticator apk which is `app-production-universal-release-signed.apk`
# oldAuthenticatorApk: old version of the authenticator app which is `Authenticator-4.1.0-RC.apk`
# outlookApk: Outlook apk name
# teamsApk: Teams apk name
# wordApk: Word apk name
# edgeApk: Edge apk name
# resultsHistoryName: Broker Release
# https://dev.azure.com/IdentityDivision/Engineering/_build?definitionId=1801&_a=summary
name: $(Build.BuildId)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

parameters:
# Stage control boolean parameters
- name: shouldRunUnitAndInstrumentedTests
  displayName: Run Unit And Instrumented Tests?
  type: boolean
  default: True
- name: shouldRunUiValidation
  displayName: Run E2E UI Validation?
  type: boolean
  default: False
- name: shouldBuildTestingLibraries
  displayName: Build & Publish Testing libs?
  type: boolean
  default: False
- name: buildLTW
  displayName: Build LTW? (Must pass Broker Discovery Flag)
  type: boolean
  default: False

# Flighting / Flagging Parameters
- name: flightingSelection
  displayName: Broker Flight Provider
  type: string
  default: "ECS"
  values:
    - ECS
    - Local
- name: flightingValueParameter
  displayName: Broker Flight Json-String (not active with ECS flighting)
  type: string
  default: '{EnablePrtV3:true,EnableBrokerPowerLiftLogging:true}'
- name: flagsValue
  displayName: Flags to Pass (passed to all libraries)
  type: string
  default: ' '
- name: shouldEnableBrokerSelectionAndDiscoveryFlag
  displayName: Should enable broker selection & discovery?
  type: boolean
  default: False

# RC Library Versioning Parameters
- name: msalVersionRC
  displayName: MSAL RC Version
  type: string
- name: commonVersionRC
  displayName: Common RC Version
  type: string
- name: common4jVersionRC
  displayName: Common4j RC Version
  type: string
- name: adAccountsVersionRC
  displayName: Broker RC Version
  type: string
- name: broker4jVersionRC
  displayName: Broker4j RC Version
  type: string
- name: adalVersionRC
  displayName: ADAL RC Version
  type: string

# Branch parameters
- name: msalBranch
  displayName: MSAL Branch
  type: string
  default: 'dev'
- name: adalBranch
  displayName: ADAL Branch
  type: string
  default: 'dev'
- name: commonBranch
  displayName: Common Branch
  type: string
  default: 'dev'
- name: brokerBranch
  displayName: Broker Branch
  type: string
  default: 'dev'

resources:
  repositories:
  - repository: msal
    type: github
    name: AzureAD/microsoft-authentication-library-for-android
    ref: ${{ parameters.msalBranch }}
    endpoint: ANDROID_GITHUB
  - repository: broker
    type: github
    name: AzureAD/ad-accounts-for-android
    ref: ${{ parameters.brokerBranch }}
    endpoint: ANDROID_GITHUB
  - repository: azuresample
    type: github
    name: Azure-Samples/ms-identity-android-java
    ref: master
    endpoint: ANDROID_GITHUB
  - repository: common
    type: github
    name: AzureAD/microsoft-authentication-library-common-for-android
    ref: ${{ parameters.commonBranch }}
    endpoint: ANDROID_GITHUB
  - repository: adal
    type: github
    name: AzureAD/azure-activedirectory-library-for-android
    ref: ${{ parameters.adalBranch }}
    endpoint: ANDROID_GITHUB

variables:
  common4jProjVersionParam: -PprojVersion=${{ parameters.common4jVersionRC }}
  common4jVersionParam: -PdistCommon4jVersion=${{ parameters.common4jVersionRC }}
  broker4jProjVersionParam: -PprojVersion=${{ parameters.broker4jVersionRC }}
  broker4jVersionParam: -PdistBroker4jVersion=${{ parameters.broker4jVersionRC }}
  commonProjVersionParam: -PprojVersion=${{ parameters.commonVersionRC }}
  commonVersionParam: -PdistCommonVersion=${{ parameters.commonVersionRC }}
  msalProjVersionParam: -PprojVersion=${{ parameters.msalVersionRC }}
  adAccountsProjVersionParam: -PprojVersion=${{ parameters.adAccountsVersionRC }}
  adalProjVersionParam: -PprojVersion=${{ parameters.adalVersionRC }}
  androidProjectDependencyParam: --configuration=distReleaseRuntimeClasspath --write-locks
  javaProjectDependencyParam: --configuration=runtimeClasspath --write-locks
  msazureServiceConnection: AndroidBroker-CI
  msazureFeedName: Android-Broker
  authenticatorPipelineId: 237369
  companyPortalPipelineId: 237827
  ltwPipelineId: 44201
  brokerApp: brokerautomationapp-dist-AutoBroker-debug.apk
  brokerTestApp: brokerautomationapp-dist-AutoBroker-debug-androidTest.apk
  companyPortalApk: com.microsoft.windowsintune.companyportal-signed.apk
  authenticatorApk: app-production-universal-release-signed.apk
  oldAuthenticatorApk: Authenticator-4.1.0-RC.apk
  oldAuthenticatorVersion: 6.2204.2470
  OSServiceConnection: LTW-Integration
  LTWFeedName: Auth-Broker-Integrated-LTW-Build
  LTWApk: LTW-signed.apk
  outlookApk: Outlook.apk
  teamsApk: Teams.apk
  wordApk: Word.apk
  edgeApk: Edge.apk
  resultsHistoryName: Broker Release
  ${{ if eq(parameters.flightingSelection, 'Local') }}:
    flightValueVariable: -PlocalFlights=${{ parameters.flightingValueParameter }}
  ${{ else }}:
    flightValueVariable: ''
  flagVariable: ${{ parameters.flagsValue }}
  ${{ if parameters.shouldEnableBrokerSelectionAndDiscoveryFlag }}:
    enableBrokerSelectionParam: -PbrokerSelectionEnabledFlag
    enableBrokerDiscoveryParam: -PnewBrokerDiscoveryEnabledFlag
  ${{ else }}:
    enableBrokerSelectionParam: ''
    enableBrokerDiscoveryParam: ''


stages:
- stage: 'addTags'
  displayName: Tag Pipeline
  dependsOn: []
  variables:
    - name: flightsTag
      value: $[replace('${{ parameters.flightingValueParameter }}', ':', ' ')]
  jobs:
  - job: addTags
    displayName: Add tags for flights
    steps:
    - task: PowerShell@2
      displayName: Run Tagging Script
      inputs:
        targetType: inline
        script: |
          Write-Host "##vso[build.addbuildtag]PROD MSAL=($(MSAL-PROD-Version)) RC MSAL=(${{ parameters.msalVersionRC }})"
          
          Write-Host "##vso[build.addbuildtag]RC Common=(${{ parameters.commonVersionRC }}) RC Common4j=(${{ parameters.common4jVersionRC }})"
          
          Write-Host "##vso[build.addbuildtag]PROD AADAuthenticator=($(Broker-PROD-Version)) RC AADAuthenticator=(${{ parameters.adAccountsVersionRC }}) RC Broker4j=(${{ parameters.broker4jVersionRC }})"
          
          Write-Host "##vso[build.addbuildtag]RC ADAL=(${{ parameters.adalVersionRC }})"
          
          if ('${{ parameters.flightingSelection }}' -eq "Local") {
            Write-Host "##vso[build.addbuildtag]Local Flighting"
            Write-Host "##vso[build.addbuildtag]Flights Passed=$(flightsTag)"
          } else {
            Write-Host "##vso[build.addbuildtag]ECS Flighting"
          }
          
          if ( ( '${{ parameters.flagsValue }}' -eq ' ' ) -and ( '${{ parameters.shouldEnableBrokerSelectionAndDiscoveryFlag }}' -eq 'false' ) ) {
            Write-Host "##vso[build.addbuildtag]No Library Flags Passed"
          } else {
            Write-Host "##vso[build.addbuildtag]Flags Passed=${{ parameters.flagsValue }} $(enableBrokerDiscoveryParam) $(enableBrokerSelectionParam)"
          }

- stage: 'checkVersionAndFlighting'
  displayName: Fail If Official Version and Local Flighting
  dependsOn: []
  jobs:
    - job: checkVersionAndFlighting
      displayName: Fail If Official Version and Local Flighting
      steps:
        - task: PowerShell@2
          displayName: Checking If Official Version and Local Flighting
          inputs:
            targetType: inline
            script: |
              # Regex ^\d+\.\d+\.\d+$ will match an official release version (digits only, delimited with '.', exactly 3 segments)
              Write-Host "Checking if we have an official release version (Ex:4.9.0) for any of the Release library versions."
              $regex = '^\d+\.\d+\.\d+$'
              
              # Check if any of the versions match the "official version" regex
              
              Write-Host "Msal RC: ${{ parameters.msalVersionRC }}"
              Write-Host "Common RC: ${{ parameters.commonVersionRC }}"
              Write-Host "Common4j RC: ${{ parameters.common4jVersionRC }}"
              Write-Host "Broker RC: ${{ parameters.adAccountsVersionRC }}"
              Write-Host "Broker4j RC: ${{ parameters.broker4jVersionRC }}"
              Write-Host "ADAL RC: ${{ parameters.adalVersionRC }}"
              
              if ('${{ parameters.msalVersionRC }}' -match $regex -or
                  '${{ parameters.commonVersionRC }}' -match $regex -or
                  '${{ parameters.common4jVersionRC }}' -match $regex -or
                  '${{ parameters.adAccountsVersionRC }}' -match $regex -or
                  '${{ parameters.broker4jVersionRC }}' -match $regex -or
                  '${{ parameters.adalVersionRC }}' -match $regex)
              {
                Write-Host "At least one version is an official release version (EX: 4.9.0, digits only, delimited with '.', exactly 3 segments)"
                Write-Host "Checking if we are using Local flight provider. If so, fail this pipeline run..."
                
                if ('${{ parameters.flightingSelection }}' -eq "Local") {
                  Write-Host "Detected we are using local flight provider with a release version. Failing pipeline run..."
                  exit 1
                } else {
                  Write-Host "We are not using local flight provider, can proceed with official release versions!"
                }
              
                # TODO: Should we also add a check if a flag is being passed and fail it with release versions?
  
              } else {
                Write-Host "None of the library versions are official release versions, proceed with run!"
              }

# Package generation
# Testing Libraries - KeyVault, LabApi, LabApiUtilities, TestUtils, UiAutomationUtilities
- stage: 'publishCommonUtilities'
  displayName: Testing Libraries - Build and publish
  dependsOn:
  - addTags
  - checkVersionAndFlighting
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldBuildTestingLibraries }}, 'True')
    )
  jobs:
    - job: queue_build
      displayName: Update Testing libraries 
      steps:
        - task: PowerShell@2
          displayName: Queue and wait for testing libraries 
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://identitydivision.visualstudio.com/" -Project "Engineering" -PipelinePAT "$(System.AccessToken)" -BuildDefinitionId "1464"  -Branch "${{ parameters.commonBranch }}"'
            workingDirectory: '$(Build.SourcesDirectory)'
# Common4j - Build and publish
- stage: 'publishCommon4jLibraries'
  displayName: Common4j - Build and publish
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  dependsOn:
  - addTags
  - checkVersionAndFlighting
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: common
      project: common4j
      testCmd: common4jUnitTestCoverageReport
      dependencyParams: $(javaProjectDependencyParam)
      assembleParams: $(common4jProjVersionParam) $(flagVariable)
      testParams: $(common4jProjVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable)
      publishParams: $(common4jProjVersionParam) $(flagVariable)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
# Common - Build and publish
- stage: 'publishCommonLibraries'
  displayName: Common - Build and publish  
  dependsOn:
  - publishCommonUtilities
  - publishCommon4jLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: common
      project: common
      assembleCmd: assembleDist
      testCmd: distDebugCommonUnitTestCoverageReport
      publishCmd: publish
      dependencyParams:  $(common4jVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(commonProjVersionParam) $(common4jVersionParam) $(flagVariable) $(enableBrokerDiscoveryParam)
      testParams: $(commonProjVersionParam) $(common4jVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable) $(enableBrokerDiscoveryParam)
      publishParams: $(commonProjVersionParam) $(common4jVersionParam) $(flagVariable) $(enableBrokerDiscoveryParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
  - job: Publish_common_for_Broker_test
    steps:
    - checkout: common
      displayName: Checkout common repository
      clean: true
      persistCredentials: True
    - task: Gradle@3
      displayName: Publish common for Broker test
      inputs:
        tasks: common:publish -PprojVersion=${{ parameters.commonVersionRC }}-test $(common4jVersionParam) $(flagVariable) $(enableBrokerDiscoveryParam) -PtrustDebugBrokerFlag
      env:
        ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME: ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME
        ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN:  $(System.AccessToken)

      
# Broker4j - Build and publish
- stage: 'publishBroker4jLibraries'
  displayName: Broker4j - Build and publish  
  dependsOn:
  - publishCommonUtilities
  - publishCommon4jLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: broker
      project: broker4j
      testCmd: broker4jUnitTestCoverageReport
      publishCmd: publishAarPublicationToVsts-maven-adal-androidRepository
      dependencyParams: $(common4jVersionParam) $(javaProjectDependencyParam)
      assembleParams: $(broker4jProjVersionParam) $(common4jVersionParam) $(flagVariable) $(flightValueVariable)
      testParams: $(broker4jProjVersionParam) $(common4jVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable) 
      publishParams: $(broker4jProjVersionParam) $(common4jVersionParam) $(flagVariable) $(flightValueVariable)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
# Broker - Build and publish
- stage: 'publishBrokerLibraries'
  displayName: Android Broker - Build and publish
  variables:
  - group: AndroidAuthClientVariables
  - name : powerLiftApiKeyParam
    value : -PpowerLiftApiKey=$(powerliftApiKey)
  - name : brokerOtelAriaTokenParam
    value : -PotelAriaToken=$(otelAriaToken)
  dependsOn: 
  - publishCommonLibraries
  - publishBroker4jLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: broker
      project: AADAuthenticator
      testCmd: distDebugAADAuthenticatorUnitTestCoverageReport
      assembleCmd: assembleDist
      publishCmd: publishAdAccountsPublicationToVsts-maven-adal-androidRepository
      dependencyParams: $(broker4jVersionParam) $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam) $(brokerOtelAriaTokenParam) $(powerLiftApiKeyParam) $(flagVariable) $(enableBrokerSelectionParam)
      testParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam) $(powerLiftApiKeyParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable) $(enableBrokerSelectionParam)
      publishParams: $(adAccountsProjVersionParam) $(broker4jVersionParam) $(commonVersionParam) $(flagVariable) $(enableBrokerSelectionParam)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN
      agentImage: 1ES-AndroidPool-EOC
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
# Msal - Build and publish      
- stage: 'publishMsal'
  displayName: Msal - Build and publish  
  dependsOn: 
  - publishCommonLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: msal
      project: msal
      assembleCmd: assembleDistRelease
      testCmd: distDebugMsalUnitTestCoverageReport
      publishCmd: publishMsalPublicationToVsts-maven-adal-androidRepository 
      dependencyParams: $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(msalProjVersionParam) $(commonVersionParam) $(flagVariable)
      testParams: $(msalProjVersionParam) $(commonVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable)
      publishParams: $(msalProjVersionParam) $(commonVersionParam) $(flagVariable)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROID_MSAL_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
# Adal - Build and publish
- stage: 'publishAdal'
  displayName: Adal - Build and publish  
  dependsOn: publishCommonLibraries
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
  - template: ../continuous-delivery/assemble&publish.yml
    parameters:
      repository: adal
      project: adal
      assembleCmd: assembleDist
      testCmd: testDistDebugUnitTest
      publishCmd: publishAdalPublicationToVsts-maven-adal-androidRepository 
      dependencyParams: $(commonVersionParam) $(androidProjectDependencyParam)
      assembleParams: $(adalProjVersionParam) $(commonVersionParam) $(flagVariable)
      testParams: $(adalProjVersionParam) $(commonVersionParam) -Psugar=true -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PshouldSkipLongRunningTest=true -PcodeCoverageEnabled=true $(flagVariable)
      publishParams: $(adalProjVersionParam) $(commonVersionParam) $(flagVariable)
      vstsMvnAndroidUsername: ENV_VSTS_MVN_ANDROIDADAL_USERNAME
      vstsMvnAndroidAccessToken: ENV_VSTS_MVN_ANDROIDADAL_ACCESSTOKEN
      shouldRunUnitTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}
      shouldRunInstrumentedTests: ${{ parameters.shouldRunUnitAndInstrumentedTests }}

# Promote Libraries
- stage: 'promoteLibraries'
  displayName: Promote Libraries to PreRelease and Release
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  dependsOn:
    - publishAdal
    - publishBrokerLibraries
    - publishMsal
  jobs:
    # Promote to Pre-Release
    - job: promote_to_prerelease
      displayName: Promote all the libraries to Pre-Release
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/promote-packages.ps1'
            arguments: '-PackagingPAT "$(System.AccessToken)" -common4jVersion "${{ parameters.common4jVersionRC }}" -commonVersion "${{ parameters.commonVersionRC }}" -broker4jVersion "${{ parameters.broker4jVersionRC }}" -adAccountsVersion "${{ parameters.adAccountsVersionRC }}" -msalVersion "${{ parameters.msalVersionRC }}" -adalVersion "${{ parameters.adalVersionRC }}" -PromoteToView "Prerelease"'
            workingDirectory: '$(Build.SourcesDirectory)'
    # Promote to Release
    - job: promote_to_release
      displayName: Promote all the libraries to Release
      timeoutInMinutes: 90
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/promote-packages.ps1'
            arguments: '-PackagingPAT "$(System.AccessToken)" -common4jVersion "${{ parameters.common4jVersionRC }}" -commonVersion "${{ parameters.commonVersionRC }}" -broker4jVersion "${{ parameters.broker4jVersionRC }}" -adAccountsVersion "${{ parameters.adAccountsVersionRC }}" -msalVersion "${{ parameters.msalVersionRC }}" -adalVersion "${{ parameters.adalVersionRC }}" -PromoteToView "Release"'
            workingDirectory: '$(Build.SourcesDirectory)'

# Broker app generation
# Authenticator
- stage: 'queueAuthenticatorBrokerApkPipeline'
  displayName: Authenticator - Queue Build Pipeline
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  dependsOn:
    - promoteLibraries
  variables:
    - group: AndroidAuthClientAutomationSecrets
  jobs:
    - job: queue_build_Authenticator
      displayName: Queue Build for Authenticator RC
      timeoutInMinutes: 120
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://msazure.visualstudio.com/" -Project "One" -PipelinePAT "$(MSAzure-PAT)" -BuildDefinitionId "$(authenticatorPipelineId)" -PipelineVariablesJson "{ ''AdAccountsVersion'': ''${{ parameters.adAccountsVersionRC }}'', ''CommonVersion'': ''${{ parameters.commonVersionRC }}'', ''MsalVersion'': ''${{ parameters.msalVersionRC }}'', ''AdalVersion'': ''${{ parameters.adalVersionRC }}'' }" -Branch "$(authenticatorBranch)" -BuildNumberOutputOnSuccessVar "authenticatorRCPipelineVersion"'
            workingDirectory: '$(Build.SourcesDirectory)'
          name: authenticatorPipelineScript
# Company Portal
- stage: 'queueCompanyPortalBrokerApkPipeline'
  displayName: Company Portal - Queue Build Pipeline
  condition: |
    and
    (
      not(failed()),
      not(canceled())
    )
  dependsOn:
    - promoteLibraries
  variables:
    - group: AndroidAuthClientAutomationSecrets
  jobs:
    - job: queue_build_CompanyPortal
      displayName: Queue Build for Company Portal RC
      timeoutInMinutes: 120
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://msazure.visualstudio.com/" -Project "Intune" -PipelinePAT "$(MSAzure-PAT)" -BuildDefinitionId "$(companyPortalPipelineId)" -WaitTimeoutInMinutes 100 -PipelineVariablesJson "{ ''AdAccountsVersion'': ''${{ parameters.adAccountsVersionRC }}'', ''CommonVersion'': ''${{ parameters.commonVersionRC }}'', ''MsalVersion'': ''${{ parameters.msalVersionRC }}''}" -Branch "$(companyPortalBranch)" -BuildNumberOutputOnSuccessVar "companyPortalRCPipelineVersion"'
            workingDirectory: '$(Build.SourcesDirectory)'
          name: companyPortalPipelineScript
# BrokerApk - Link to Windows Queue pipeline
- stage: 'queueLinkToWindowsPipeline'
  variables:
    - group: AndroidAuthClientAutomationSecrets
  displayName: Link To Windows - Queue Build Pipeline
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.buildLTW }}, 'True')
    )
  dependsOn:
    - promoteLibraries
  jobs:
    - job: queue_build_LinkToWindows
      displayName: Generate Link To Windows Apk
      timeoutInMinutes: 120
      steps:
        - checkout: self
          persistCredentials: True
        - task: PowerShell@2
          displayName: Queue and wait for Link to Windows Apk generation pipeline
          inputs:
            filePath: '$(Build.SourcesDirectory)/azure-pipelines/scripts/queue-build.ps1'
            arguments: '-OrganizationUrl "https://microsoft.visualstudio.com/" -Project "OS" -PipelinePAT "$(LTW-PAT)" -WaitTimeoutInMinutes 120 -BuildDefinitionId "$(ltwPipelineId)" -PipelineVariablesJson "{ ''AdAccountsVersion'': ''${{ parameters.adAccountsVersionRC }}'', ''CommonVersion'': ''${{ parameters.commonVersionRC }}'', ''MsalVersion'': ''${{ parameters.msalVersionRC }}'', ''AdalVersion'': ''${{ parameters.adalVersionRC }}''}" -Branch "$(LTWBranch)" -BuildReason "UserCreated" -BuildNumberOutputOnSuccessVar "rawLtwPipelineBuildNumber"'
            workingDirectory: '$(Build.SourcesDirectory)'
          name: ltwPipelineScript
        - task: PowerShell@2
          displayName: 'Trim LTW build number to get apk version'
          inputs:
            targetType: inline
            script: |
              # LTW pipeline build number is structured like (versionMajor).(versionMinor).(versionBuild).(versionRevision).(build.reason)
              # The version of APK published to feed is (versionMajor).(versionMinor).(versionBuild)
              # We use regex to remove the last two segments so we get the correct version number
              Write-Host "Raw Build Number: $(ltwPipelineScript.rawLtwPipelineBuildNumber)"
              $trimmedVersion = "$(ltwPipelineScript.rawLtwPipelineBuildNumber)" -replace "\.\d+\.\w+$",""
              Write-Host "Trimmed Version Number: $trimmedVersion"
              Write-Host "##vso[task.setvariable variable=ltwRCPipelineVersion;isOutput=true]$trimmedVersion"
          name: ltwVersionScript

# TestApp generation
- stage: 'testappgeneration'
  dependsOn:
    - publishAdal
    - publishCommonLibraries
    - publishMsal
    - publishBrokerLibraries
    - promoteLibraries
  displayName: Generate Test Apps
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - template: ./templates/build-azure-sample-app.yml
      parameters:
        productFlavors: External
        signingConfigurations: Release
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-azure-sample-app.yml
      parameters:
        productFlavors: External
        signingConfigurations: Release
        msalVersion: $(MSAL-PROD-Version)
        packageVariant: PROD
    - template: ./templates/build-broker-host.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Release
        msalVersion: ${{ parameters.msalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        adAccountsVersion: ${{ parameters.adAccountsVersionRC }}
        adalVersion: ${{ parameters.adalVersionRC }}
        packageVariant: RC
        publishToFeed: True
        publishingPackageName: "com.microsoft.identity.testuserapp.prod"
        publishVersion: ${{ parameters.adAccountsVersionRC }}
    - template: ./templates/build-broker-host.yml
      parameters:
        productFlavors: Local
        signingConfigurations: Debug
        msalVersion: ${{ parameters.msalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        adAccountsVersion: ${{ parameters.adAccountsVersionRC }}
        adalVersion: ${{ parameters.adalVersionRC }}
        packageVariant: RC
        flagsParamString: $(flagVariable)
        localFlightsParamString: $(flightValueVariable)
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        msalFlavor: Dist
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        msalFlavor: Dist
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: $(MSAL-PROD-Version)
        packageVariant: PROD
    - template: ./templates/build-msal-automation-app.yml
      parameters:
        brokerApp: BrokerHost
        msalFlavor: Local
        brokerSource: LocalApk
        brokerUpdateSource: LocalApk
        msalVersion: $(MSAL-PROD-Version)
        packageVariant: PROD
    - template: ./templates/build-broker-automation-app.yml
      parameters:
        brokerApp: AutoBroker
        brokerFlavor: Dist
        brokerSource: LocalApk
        adalVersion: ${{ parameters.adalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
    - template: ../ui-automation/templates/build-one-auth-test-app.yml
      parameters:
        commonVersion: ${{ parameters.commonVersionRC }}
        branch: $(OneAuthBranch)
    - template: ./templates/build-msal-test-app.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Debug
        msalVersion: ${{ parameters.msalVersionRC }}
        packageVariant: RC
    - template: ./templates/build-adal-test-app.yml
      parameters:
        productFlavors: Dist
        signingConfigurations: Debug
        adalVersion: ${{ parameters.adalVersionRC }}
        commonVersion: ${{ parameters.commonVersionRC }}
        packageVariant: RC
# Download First Party Apps
- stage: 'firstpartyapps'
  dependsOn:
  - promoteLibraries # adding this dependency to improve pipeline readability
  displayName: Download First Party Apps (Outlook, Teams, Word, Edge)
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - template: ./templates/download-first-party-apps.yml
# Download Brokers
- stage: 'download_brokers'
  dependsOn:
  - queueAuthenticatorBrokerApkPipeline
  - queueCompanyPortalBrokerApkPipeline
  - queueLinkToWindowsPipeline
  - testappgeneration
  displayName: Download PROD & RC Brokers
  condition:
    and
    (
      not(failed()),
      not(canceled())
    )
  jobs:
    - job: 'download_brokers_job'
      displayName: Download Brokers
      pool:
        vmImage: ubuntu-latest
      variables:
        authenticatorRCPipelineVersion: $[ stageDependencies.queueAuthenticatorBrokerApkPipeline.queue_build_Authenticator.outputs['authenticatorPipelineScript.authenticatorRCPipelineVersion'] ]
        companyPortalRCPipelineVersion: $[ stageDependencies.queueCompanyPortalBrokerApkPipeline.queue_build_CompanyPortal.outputs['companyPortalPipelineScript.companyPortalRCPipelineVersion'] ]
        ltwRCPipelineVersion: $[ stageDependencies.queueLinkToWindowsPipeline.queue_build_LinkToWindows.outputs['ltwVersionScript.ltwRCPipelineVersion'] ]
      steps:
        - task: PowerShell@2
          displayName: 'Check if We Ran Broker APK Builds'
          inputs:
            targetType: inline
            script: |
              if ('$(authenticatorRCPipelineVersion)' -ne '') {
                Write-Host "##vso[task.setvariable variable=rcAuthenticatorVersion]$(authenticatorRCPipelineVersion)"
              }
              if ('$(companyPortalRCPipelineVersion)' -ne '') {
                Write-Host "##vso[task.setvariable variable=rcCompanyPortalVersion]$(companyPortalRCPipelineVersion)"
              }          
              if ('$(ltwRCPipelineVersion)' -ne '') {
                Write-Host "##vso[task.setvariable variable=rcLTWVersion]$(ltwRCPipelineVersion)"
              }
        - task: PowerShell@2
          displayName: 'Create Tags for Broker APK Versions'
          inputs:
            targetType: inline
            script: |
              $rcAuthenticatorVersionTag = "$(rcAuthenticatorVersion)" -replace "\*","Latest In Feed"
              $prodAuthenticatorVersionTag = "$(Authenticator-APK-PROD-Version)" -replace "\*","Latest In Feed"
              $rcCompanyPortalVersionTag = "$(rcCompanyPortalVersion)" -replace "\*","Latest In Feed"
              $prodCompanyPortalVersionTag = "$(CompanyPortal-APK-PROD-Version)" -replace "\*","Latest In Feed"
              $rcLTWVersionTag = "$(rcLTWVersion)" -replace "\*","Latest In Feed"
              
              Write-Host "##vso[build.addbuildtag]RC Authenticator APK Version=($rcAuthenticatorVersionTag) PROD Authenticator APK Version=($prodAuthenticatorVersionTag)"
              Write-Host "##vso[build.addbuildtag]RC CompanyPortal APK Version=($rcCompanyPortalVersionTag) PROD CompanyPortal APK Version=($prodCompanyPortalVersionTag)"
              Write-Host "##vso[build.addbuildtag]RC LTW APK Version=($rcLTWVersionTag)"
        - template: ./templates/download-rc-prod-brokers.yml
          parameters:
            msazureServiceConnection: '$(msazureServiceConnection)'
            msazureFeedName: '$(msazureFeedName)'
            authenticatorVersionRC: $(rcAuthenticatorVersion)
            authenticatorVersionPROD: $(Authenticator-APK-PROD-Version)
            oldAuthenticatorVersion: $(oldAuthenticatorVersion)
            companyPortalVersionRC: $(rcCompanyPortalVersion)
            companyPortalVersionPROD: $(CompanyPortal-APK-PROD-Version)
            prodBrokerHostVersion: $(Broker-PROD-Version)
            OSServiceConnection: '$(OSServiceConnection)'
            LTWFeedName: '$(LTWFeedName)'
            LTWVersionRC: $(rcLTWVersion)

# ADAL with Broker (API 30+)
- stage: 'adal_with_broker_high_api'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition:  |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: RC ADAL with RC Broker UI Automation
  jobs:
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/brokerautomationapks/$(brokerApp)"
        automationAppTestApkPath: "$(Pipeline.Workspace)/brokerautomationapks/$(brokertestApp)"
        testTargetPackages: $(brokerTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "brokerautomationapp-testpass-adal&basic-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/RC/$(companyPortalApk),\
                      /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/RC/$(authenticatorApk),\
                      /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                      /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                      /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                      /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                      /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                      /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                      /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "Broker(ADAL) UI Automation - Build (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        flankShards: $(flankShards)
        displayNamePrefix: "(API 30+) "

# RC MSAL - PROD Broker
- stage: 'RC_msal_PROD_broker'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: RC MSAL with PROD Broker UI Automation
  jobs:
    # RC MSAL with PROD Broker API 30+
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/PROD/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/PROD/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/PROD/brokerHost-dist-release.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "RC MSAL - PROD Broker (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, notAnnotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        flankShards: $(flankShards)
        jobTitle: run_on_flank_with_flank_high_api
        displayNamePrefix: "(API 30+) "
    # RC MSAL with PROD Broker API 29-
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-RC-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-lowapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/PROD/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/PROD/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/PROD/brokerHost-dist-release.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-RC/AzureSample-external-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdLow)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionLow)
        testRunTitle: "RC MSAL - PROD Broker (API $(firebaseDeviceAndroidVersionLow)) # $(Build.BuildNumber)"
        extraTarget: "annotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        jobTitle: run_on_flank_low_api
        displayNamePrefix: "(API 29-) "

# PROD MSAL - RC Broker
- stage: 'PROD_msal_RC_broker'
  dependsOn:
  - testappgeneration
  - firstpartyapps
  - download_brokers
  condition: |
    and
    (
      not(failed()),
      not(canceled()),
      eq(${{ parameters.shouldRunUiValidation }}, 'True')
    )
  displayName: PROD MSAL with RC Broker UI Automation
  jobs:
    # PROD MSAL with RC Broker API 30+
    - template: ./templates/flank/run-on-firebase-with-flank.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "PROD-MSAL-RC-Broker-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/RC/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/RC/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "PROD MSAL - RC Broker (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, notAnnotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        flankShards: $(flankShards)
        jobTitle: run_on_flank_with_flank_high_api
        displayNamePrefix: "(API 30+) "
    # PROD MSAL with RC Broker API 30+ (Brokerhost Build)
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-BrokerHost-PROD-LocalApk/msalautomationapp-local-BrokerHost-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-BrokerHost-PROD-LocalApk/msalautomationapp-local-BrokerHost-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "PROD-MSAL-RC-BrokerHost-debug-highapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/RC/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/RC/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/OldBrokerHost.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/brokerHost-local-debug.apk,\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Local-RC-debug/brokerHost-local-debug.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdHigh)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionHigh)
        testRunTitle: "PROD MSAL - RC Broker (BrokerHost tests, debug) (API $(firebaseDeviceAndroidVersionHigh)) # $(Build.BuildNumber)"
        extraTarget: "notAnnotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus, annotation com.microsoft.identity.client.ui.automation.annotations.LocalBrokerHostDebugUiTest"
        jobTitle: run_on_flank_brokerhost_high_api
        displayNamePrefix: "(API 30+, Brokerhost) "
    # PROD MSAL with RC Broker API 29-
    - template: ./templates/run-on-firebase.yml
      parameters:
        automationAppApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug.apk"
        automationAppTestApkPath: "$(Pipeline.Workspace)/msalautomationapks-AutoBroker-PROD-LocalApk/msalautomationapp-dist-AutoBroker-debug-androidTest.apk"
        testTargetPackages: $(msalTestTarget)
        resultsHistoryName: "$(resultsHistoryName)"
        resultsDir: "RC_MSAL-PROD_Broker-lowapi-$(Build.BuildId)-$(Build.BuildNumber)"
        otherFiles: "/sdcard/CompanyPortal.apk=$(Pipeline.Workspace)/brokerapks/RC/$(companyPortalApk),\
                          /sdcard/Authenticator.apk=$(Pipeline.Workspace)/brokerapks/RC/$(authenticatorApk),\
                          /sdcard/OldAuthenticator.apk=$(Pipeline.WorkSpace)/brokerapks/OldAPKs/$(oldAuthenticatorApk),\
                          /sdcard/AzureSample.apk=$(Pipeline.Workspace)/AzureSample-PROD/AzureSample-external-release.apk,\
                          /sdcard/BrokerHost.apk=$(Pipeline.WorkSpace)/BrokerHost-Dist-RC-release/brokerHost-dist-release.apk,\
                          /sdcard/Outlook.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(outlookApk),\
                          /sdcard/Teams.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(teamsApk),\
                          /sdcard/Word.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(wordApk),\
                          /sdcard/Edge.apk=$(Pipeline.WorkSpace)/firstpartyapks/$(edgeApk)"
        firebaseDeviceId: $(firebaseDeviceIdLow)
        firebaseDeviceAndroidVersion: $(firebaseDeviceAndroidVersionLow)
        testRunTitle: "PROD MSAL - RC Broker (API $(firebaseDeviceAndroidVersionLow)) # $(Build.BuildNumber)"
        extraTarget: "annotation com.microsoft.identity.client.ui.automation.annotations.RunOnAPI29Minus"
        jobTitle: run_on_flank_low_api
        displayNamePrefix: "(API 29-) "
